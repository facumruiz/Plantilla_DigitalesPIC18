

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Nov 10 15:02:53 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    36                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    37                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    38  0000                     
    39                           ; Version 2.20
    40                           ; Generated 12/02/2020 GMT
    41                           ; 
    42                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4550 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataCOMRAM
    75  0013BA                     __pidataCOMRAM:
    76                           	callstack 0
    77                           
    78                           ;initializer for _col
    79  0013BA  FF                 	db	255
    80                           
    81                           ;initializer for _fila
    82  0013BB  FF                 	db	255
    83                           
    84                           ;initializer for tic_debounce@debounce_tic
    85  0013BC  0A                 	db	10
    86                           
    87                           ;initializer for _OffsetPeriodo
    88  0013BD  20                 	db	32
    89                           
    90                           ;initializer for _UpperByte
    91  0013BE  FF                 	db	255
    92                           
    93                           ;initializer for _MEMDIG
    94  0013BF  01                 	db	1
    95                           
    96                           ;initializer for tic_encoder@estado
    97  0013C0  04                 	db	4
    98                           
    99                           ;initializer for Send4Disp@Nro_Disp
   100  0013C1  01                 	db	1
   101                           
   102                           ;initializer for Leds13@i
   103  0013C2  01                 	db	1
   104                           
   105                           ;initializer for _frecuencia
   106  0013C3  03E8               	dw	1000
   107                           
   108                           	psect	smallconst
   109  000800                     __psmallconst:
   110                           	callstack 0
   111  000800  00                 	db	0
   112  000801                     _teclas:
   113                           	callstack 0
   114  000801  01                 	db	1
   115  000802  02                 	db	2
   116  000803  03                 	db	3
   117  000804  04                 	db	4
   118  000805  05                 	db	5
   119  000806  06                 	db	6
   120  000807  07                 	db	7
   121  000808  08                 	db	8
   122  000809  09                 	db	9
   123  00080A  2A                 	db	42
   124  00080B  00                 	db	0
   125  00080C  2B                 	db	43
   126  00080D                     __end_of_teclas:
   127                           	callstack 0
   128  00080D                     STR_1:
   129  00080D  54                 	db	84	;'T'
   130  00080E  65                 	db	101	;'e'
   131  00080F  63                 	db	99	;'c'
   132  000810  6C                 	db	108	;'l'
   133  000811  61                 	db	97	;'a'
   134  000812  3A                 	db	58	;':'
   135  000813  20                 	db	32
   136  000814  00                 	db	0
   137  000815                     STR_2:
   138  000815  41                 	db	65	;'A'
   139  000816  64                 	db	100	;'d'
   140  000817  63                 	db	99	;'c'
   141  000818  3A                 	db	58	;':'
   142  000819  20                 	db	32
   143  00081A  00                 	db	0
   144  00081B                     STR_3:
   145  00081B  50                 	db	80	;'P'
   146  00081C  75                 	db	117	;'u'
   147  00081D  6C                 	db	108	;'l'
   148  00081E  73                 	db	115	;'s'
   149  00081F  3A                 	db	58	;':'
   150  000820  00                 	db	0
   151  000821  00                 	db	0	; dummy byte at the end
   152  0000                     
   153                           	psect	nvCOMRAM
   154  000051                     __pnvCOMRAM:
   155                           	callstack 0
   156  000051                     _LCD_tout:
   157                           	callstack 0
   158  000051                     	ds	2
   159  0000                     _LATBbits	set	3978
   160  0000                     _PORTB	set	3969
   161  0000                     _PORTDbits	set	3971
   162  0000                     _PORTAbits	set	3968
   163  0000                     _TRISEbits	set	3990
   164  0000                     _EECON2	set	4007
   165  0000                     _EECON1bits	set	4006
   166  0000                     _EEDATA	set	4008
   167  0000                     _EEADR	set	4009
   168  0000                     _PORTD	set	3971
   169  0000                     _ADRESH	set	4036
   170  0000                     _ADCON0bits	set	4034
   171  0000                     _ADCON2	set	4032
   172  0000                     _TRISAbits	set	3986
   173  0000                     _PORTA	set	3968
   174  0000                     _TXREG	set	4013
   175  0000                     _T2CONbits	set	4042
   176  0000                     _CCP1CONbits	set	4029
   177  0000                     _CCPR1L	set	4030
   178  0000                     _PR2	set	4043
   179  0000                     _RCREG	set	4014
   180  0000                     _RCSTAbits	set	4011
   181  0000                     _SPBRGH	set	4016
   182  0000                     _SPBRG	set	4015
   183  0000                     _BAUDCONbits	set	4024
   184  0000                     _TXSTAbits	set	4012
   185  0000                     _PIE1bits	set	3997
   186  0000                     _PIR1bits	set	3998
   187  0000                     _TMR1H	set	4047
   188  0000                     _TMR1L	set	4046
   189  0000                     _T1CONbits	set	4045
   190  0000                     _PORTBbits	set	3969
   191  0000                     _INTCON3bits	set	4080
   192  0000                     _INTCON2bits	set	4081
   193  0000                     _TRISBbits	set	3987
   194  0000                     _TRISC	set	3988
   195  0000                     _PORTCbits	set	3970
   196  0000                     _LATEbits	set	3981
   197  0000                     _LATAbits	set	3977
   198  0000                     _LATCbits	set	3979
   199  0000                     _LATDbits	set	3980
   200  0000                     _TRISCbits	set	3988
   201  0000                     _TRISB	set	3987
   202  0000                     _TRISE	set	3990
   203  0000                     _TRISA	set	3986
   204  0000                     _ADCON1	set	4033
   205  0000                     _CMCON	set	4020
   206  0000                     _TRISD	set	3989
   207  0000                     _LATE	set	3981
   208  0000                     _LATD	set	3980
   209  0000                     _LATC	set	3979
   210  0000                     _LATB	set	3978
   211  0000                     _LATA	set	3977
   212  0000                     _TMR0H	set	4055
   213  0000                     _TMR0L	set	4054
   214  0000                     _PORTEbits	set	3972
   215  0000                     _T0CONbits	set	4053
   216  0000                     _INTCONbits	set	4082
   217  0000                     _RBIE	set	32659
   218  0000                     _RBIP	set	32648
   219  0000                     _RBPU	set	32655
   220  0000                     _INT1IE	set	32643
   221  0000                     _INT1IF	set	32640
   222  0000                     _INT0IF	set	32657
   223  0000                     _INT0IE	set	32660
   224  0000                     _RBIF	set	32656
   225  0000                     _TMR0IF	set	32658
   226                           
   227                           ; #config settings
   228                           
   229                           	psect	cinit
   230  00127A                     __pcinit:
   231                           	callstack 0
   232  00127A                     start_initialization:
   233                           	callstack 0
   234  00127A                     __initialization:
   235                           	callstack 0
   236                           
   237                           ; Initialize objects allocated to COMRAM (11 bytes)
   238                           ; load TBLPTR registers with __pidataCOMRAM
   239  00127A  0EBA               	movlw	low __pidataCOMRAM
   240  00127C  6EF6               	movwf	tblptrl,c
   241  00127E  0E13               	movlw	high __pidataCOMRAM
   242  001280  6EF7               	movwf	tblptrh,c
   243  001282  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   244  001284  6EF8               	movwf	tblptru,c
   245  001286  EE00  F046         	lfsr	0,__pdataCOMRAM
   246  00128A  EE10 F00B          	lfsr	1,11
   247  00128E                     copy_data0:
   248  00128E  0009               	tblrd		*+
   249  001290  CFF5 FFEE          	movff	tablat,postinc0
   250  001294  50E5               	movf	postdec1,w,c
   251  001296  50E1               	movf	fsr1l,w,c
   252  001298  E1FA               	bnz	copy_data0
   253                           
   254                           ; Clear objects allocated to COMRAM (40 bytes)
   255  00129A  EE00  F001         	lfsr	0,__pbssCOMRAM
   256  00129E  0E28               	movlw	40
   257  0012A0                     clear_0:
   258  0012A0  6AEE               	clrf	postinc0,c
   259  0012A2  06E8               	decf	wreg,f,c
   260  0012A4  E1FD               	bnz	clear_0
   261  0012A6                     end_of_initialization:
   262                           	callstack 0
   263  0012A6                     __end_of__initialization:
   264                           	callstack 0
   265  0012A6  9053               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   266  0012A8  9253               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   267  0012AA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   268  0012AC  6EF8               	movwf	tblptru,c
   269  0012AE  0100               	movlb	0
   270  0012B0  EF41  F005         	goto	_main	;jump to C main() function
   271                           
   272                           	psect	bssCOMRAM
   273  000001                     __pbssCOMRAM:
   274                           	callstack 0
   275  000001                     _desplazar_tout:
   276                           	callstack 0
   277  000001                     	ds	2
   278  000003                     _MedioPeriodoSet:
   279                           	callstack 0
   280  000003                     	ds	2
   281  000005                     _numero:
   282                           	callstack 0
   283  000005                     	ds	2
   284  000007                     _tiempo:
   285                           	callstack 0
   286  000007                     	ds	2
   287  000009                     _led_tout:
   288                           	callstack 0
   289  000009                     	ds	2
   290  00000B                     tecla@status_KB:
   291                           	callstack 0
   292  00000B                     	ds	1
   293  00000C                     _delay_kb:
   294                           	callstack 0
   295  00000C                     	ds	1
   296  00000D                     _flag_kb:
   297                           	callstack 0
   298  00000D                     	ds	1
   299  00000E                     debounce@cnt1:
   300                           	callstack 0
   301  00000E                     	ds	1
   302  00000F                     debounce@cnt0:
   303                           	callstack 0
   304  00000F                     	ds	1
   305  000010                     debounce@state:
   306                           	callstack 0
   307  000010                     	ds	1
   308  000011                     _MultiplicadorSet:
   309                           	callstack 0
   310  000011                     	ds	1
   311  000012                     _Multiplicador:
   312                           	callstack 0
   313  000012                     	ds	1
   314  000013                     _LowerByte:
   315                           	callstack 0
   316  000013                     	ds	1
   317  000014                     mux_display@contdisp:
   318                           	callstack 0
   319  000014                     	ds	1
   320  000015                     _UNI:
   321                           	callstack 0
   322  000015                     	ds	1
   323  000016                     _DEC:
   324                           	callstack 0
   325  000016                     	ds	1
   326  000017                     _CENT:
   327                           	callstack 0
   328  000017                     	ds	1
   329  000018                     _UMIL:
   330                           	callstack 0
   331  000018                     	ds	1
   332  000019                     _flagCanal:
   333                           	callstack 0
   334  000019                     	ds	1
   335  00001A                     _encoderTout:
   336                           	callstack 0
   337  00001A                     	ds	1
   338  00001B                     _posicionEncoder:
   339                           	callstack 0
   340  00001B                     	ds	1
   341  00001C                     _minimoEncoder:
   342                           	callstack 0
   343  00001C                     	ds	1
   344  00001D                     _maximoEncoder:
   345                           	callstack 0
   346  00001D                     	ds	1
   347  00001E                     Botones13@Estado_BOT:
   348                           	callstack 0
   349  00001E                     	ds	1
   350  00001F                     _valor_pote:
   351                           	callstack 0
   352  00001F                     	ds	1
   353  000020                     _uni:
   354                           	callstack 0
   355  000020                     	ds	1
   356  000021                     _cent:
   357                           	callstack 0
   358  000021                     	ds	1
   359  000022                     _dec:
   360                           	callstack 0
   361  000022                     	ds	1
   362  000023                     _tiempo_lectura_adc:
   363                           	callstack 0
   364  000023                     	ds	1
   365  000024                     _pulsador:
   366                           	callstack 0
   367  000024                     	ds	1
   368  000025                     _boton:
   369                           	callstack 0
   370  000025                     	ds	1
   371  000026                     _EstadoDeLosBotones:
   372                           	callstack 0
   373  000026                     	ds	1
   374  000027                     _bot_tout:
   375                           	callstack 0
   376  000027                     	ds	1
   377  000028                     _mux_tout:
   378                           	callstack 0
   379  000028                     	ds	1
   380                           
   381                           	psect	dataCOMRAM
   382  000046                     __pdataCOMRAM:
   383                           	callstack 0
   384  000046                     _col:
   385                           	callstack 0
   386  000046                     	ds	1
   387  000047                     _fila:
   388                           	callstack 0
   389  000047                     	ds	1
   390  000048                     tic_debounce@debounce_tic:
   391                           	callstack 0
   392  000048                     	ds	1
   393  000049                     _OffsetPeriodo:
   394                           	callstack 0
   395  000049                     	ds	1
   396  00004A                     _UpperByte:
   397                           	callstack 0
   398  00004A                     	ds	1
   399  00004B                     _MEMDIG:
   400                           	callstack 0
   401  00004B                     	ds	1
   402  00004C                     tic_encoder@estado:
   403                           	callstack 0
   404  00004C                     	ds	1
   405  00004D                     Send4Disp@Nro_Disp:
   406                           	callstack 0
   407  00004D                     	ds	1
   408  00004E                     Leds13@i:
   409                           	callstack 0
   410  00004E                     	ds	1
   411  00004F                     _frecuencia:
   412                           	callstack 0
   413  00004F                     	ds	2
   414                           
   415                           	psect	cstackCOMRAM
   416  000029                     __pcstackCOMRAM:
   417                           	callstack 0
   418  000029                     ??_tecla:
   419  000029                     ??_Botones13:
   420  000029                     ?___awmod:
   421                           	callstack 0
   422  000029                     obtener_ADC8@GuardoPorta:
   423                           	callstack 0
   424  000029                     write_LCD@dato:
   425                           	callstack 0
   426  000029                     ___awmod@dividend:
   427                           	callstack 0
   428                           
   429                           ; 2 bytes @ 0x0
   430  000029                     	ds	1
   431  00002A                     obtener_ADC8@GuardoTrisa:
   432                           	callstack 0
   433  00002A                     write_DATA@dato:
   434                           	callstack 0
   435  00002A                     write_CMD@dato:
   436                           	callstack 0
   437                           
   438                           ; 1 bytes @ 0x1
   439  00002A                     	ds	1
   440  00002B                     Botones13@Boton_Presionado:
   441                           	callstack 0
   442  00002B                     char2LCD@dato:
   443                           	callstack 0
   444  00002B                     set_CURSOR@posi:
   445                           	callstack 0
   446  00002B                     tecla@tecla_KB:
   447                           	callstack 0
   448  00002B                     msg2LCD@datos:
   449                           	callstack 0
   450  00002B                     ___awmod@divisor:
   451                           	callstack 0
   452  00002B                     LCD_init@i:
   453                           	callstack 0
   454                           
   455                           ; 4 bytes @ 0x2
   456  00002B                     	ds	1
   457  00002C                     char2LCD@i:
   458                           	callstack 0
   459  00002C                     set_CURSOR@i:
   460                           	callstack 0
   461                           
   462                           ; 4 bytes @ 0x3
   463  00002C                     	ds	1
   464  00002D                     ___awmod@counter:
   465                           	callstack 0
   466  00002D                     msg2LCD@i:
   467                           	callstack 0
   468                           
   469                           ; 4 bytes @ 0x4
   470  00002D                     	ds	1
   471  00002E                     ___awmod@sign:
   472                           	callstack 0
   473                           
   474                           ; 1 bytes @ 0x5
   475  00002E                     	ds	1
   476  00002F                     ?___awdiv:
   477                           	callstack 0
   478  00002F                     ___awdiv@dividend:
   479                           	callstack 0
   480  00002F                     LCD_init@i_1842:
   481                           	callstack 0
   482                           
   483                           ; 4 bytes @ 0x6
   484  00002F                     	ds	2
   485  000031                     ___awdiv@divisor:
   486                           	callstack 0
   487                           
   488                           ; 2 bytes @ 0x8
   489  000031                     	ds	2
   490  000033                     ___awdiv@counter:
   491                           	callstack 0
   492  000033                     LCD_init@i_1843:
   493                           	callstack 0
   494                           
   495                           ; 4 bytes @ 0xA
   496  000033                     	ds	1
   497  000034                     ___awdiv@sign:
   498                           	callstack 0
   499                           
   500                           ; 1 bytes @ 0xB
   501  000034                     	ds	1
   502  000035                     ___awdiv@quotient:
   503                           	callstack 0
   504                           
   505                           ; 2 bytes @ 0xC
   506  000035                     	ds	2
   507  000037                     LCD_init@i_1844:
   508                           	callstack 0
   509                           
   510                           ; 4 bytes @ 0xE
   511  000037                     	ds	4
   512  00003B                     LCD_init@i_1845:
   513                           	callstack 0
   514                           
   515                           ; 4 bytes @ 0x12
   516  00003B                     	ds	4
   517  00003F                     LCD_init@i_1846:
   518                           	callstack 0
   519                           
   520                           ; 4 bytes @ 0x16
   521  00003F                     	ds	4
   522  000043                     ??_main:
   523                           
   524                           ; 1 bytes @ 0x1A
   525  000043                     	ds	1
   526  000044                     _main$2691:
   527                           	callstack 0
   528                           
   529                           ; 2 bytes @ 0x1B
   530  000044                     	ds	2
   531                           
   532 ;;
   533 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   534 ;;
   535 ;; *************** function _main *****************
   536 ;; Defined at:
   537 ;;		line 21 in file "main.c"
   538 ;; Parameters:    Size  Location     Type
   539 ;;		None
   540 ;; Auto vars:     Size  Location     Type
   541 ;;		None
   542 ;; Return value:  Size  Location     Type
   543 ;;                  1    wreg      void 
   544 ;; Registers used:
   545 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   546 ;; Tracked objects:
   547 ;;		On entry : 0/0
   548 ;;		On exit  : 0/0
   549 ;;		Unchanged: 0/0
   550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   551 ;;      Params:         0       0       0       0       0       0       0       0       0
   552 ;;      Locals:         2       0       0       0       0       0       0       0       0
   553 ;;      Temps:          1       0       0       0       0       0       0       0       0
   554 ;;      Totals:         3       0       0       0       0       0       0       0       0
   555 ;;Total ram usage:        3 bytes
   556 ;; Hardware stack levels required when called: 5
   557 ;; This function calls:
   558 ;;		_Botones13
   559 ;;		_LCD_init
   560 ;;		_PicIni13
   561 ;;		_TIMER0_INI
   562 ;;		___awdiv
   563 ;;		___awmod
   564 ;;		_char2LCD
   565 ;;		_msg2LCD
   566 ;;		_obtener_ADC8
   567 ;;		_set_CURSOR
   568 ;;		_tecla
   569 ;;		_tecladoIni13
   570 ;; This function is called by:
   571 ;;		Startup code after reset
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575                           	psect	text0
   576  000A82                     __ptext0:
   577                           	callstack 0
   578  000A82                     _main:
   579                           	callstack 26
   580  000A82                     
   581                           ;main.c: 24:    PicIni13();
   582  000A82  EC75  F009         	call	_PicIni13	;wreg free
   583                           
   584                           ;main.c: 25:    TIMER0_INI();
   585  000A86  EC9E  F009         	call	_TIMER0_INI	;wreg free
   586  000A8A                     
   587                           ;main.c: 26:     {;main.c: 27:         INTCONbits.TMR0IF = 0;
   588  000A8A  94F2               	bcf	242,2,c	;volatile
   589  000A8C                     
   590                           ;main.c: 28:         INTCONbits.GIE = 1;
   591  000A8C  8EF2               	bsf	242,7,c	;volatile
   592  000A8E                     
   593                           ;main.c: 29:         T0CONbits.TMR0ON = 1;
   594  000A8E  8ED5               	bsf	213,7,c	;volatile
   595  000A90                     
   596                           ;main.c: 30:     };main.c: 31:    LCD_init();
   597  000A90  EC4A  F006         	call	_LCD_init	;wreg free
   598  000A94                     
   599                           ;main.c: 32:    tecladoIni13();
   600  000A94  ECAA  F009         	call	_tecladoIni13	;wreg free
   601  000A98                     
   602                           ;main.c: 33:    msg2LCD("Tecla: ");
   603  000A98  0E0D               	movlw	low STR_1
   604  000A9A  6E2B               	movwf	msg2LCD@datos^0,c
   605  000A9C  0E08               	movlw	high STR_1
   606  000A9E  6E2C               	movwf	(msg2LCD@datos+1)^0,c
   607  000AA0  EC92  F008         	call	_msg2LCD	;wreg free
   608  000AA4                     
   609                           ;main.c: 34:    set_CURSOR(0x40);
   610  000AA4  0E40               	movlw	64
   611  000AA6  ECFA  F008         	call	_set_CURSOR
   612                           
   613                           ;main.c: 35:    msg2LCD("Adc: ");
   614  000AAA  0E15               	movlw	low STR_2
   615  000AAC  6E2B               	movwf	msg2LCD@datos^0,c
   616  000AAE  0E08               	movlw	high STR_2
   617  000AB0  6E2C               	movwf	(msg2LCD@datos+1)^0,c
   618  000AB2  EC92  F008         	call	_msg2LCD	;wreg free
   619  000AB6                     
   620                           ;main.c: 36:    set_CURSOR(0x4A);
   621  000AB6  0E4A               	movlw	74
   622  000AB8  ECFA  F008         	call	_set_CURSOR
   623  000ABC                     
   624                           ;main.c: 37:    msg2LCD("Puls:");
   625  000ABC  0E1B               	movlw	low STR_3
   626  000ABE  6E2B               	movwf	msg2LCD@datos^0,c
   627  000AC0  0E08               	movlw	high STR_3
   628  000AC2  6E2C               	movwf	(msg2LCD@datos+1)^0,c
   629  000AC4  EC92  F008         	call	_msg2LCD	;wreg free
   630  000AC8                     l2812:
   631                           
   632                           ;main.c: 40:         boton = tecla();
   633  000AC8  EC11  F004         	call	_tecla	;wreg free
   634  000ACC  6E25               	movwf	_boton^0,c
   635  000ACE                     
   636                           ;main.c: 41:         if(boton!=0xFF){
   637  000ACE  2825               	incf	_boton^0,w,c
   638  000AD0  B4D8               	btfsc	status,2,c
   639  000AD2  EF6D  F005         	goto	u1951
   640  000AD6  EF6F  F005         	goto	u1950
   641  000ADA                     u1951:
   642  000ADA  EF76  F005         	goto	l72
   643  000ADE                     u1950:
   644  000ADE                     
   645                           ;main.c: 42:             set_CURSOR(0x07);
   646  000ADE  0E07               	movlw	7
   647  000AE0  ECFA  F008         	call	_set_CURSOR
   648                           
   649                           ;main.c: 43:             char2LCD(boton+48);
   650  000AE4  5025               	movf	_boton^0,w,c
   651  000AE6  0F30               	addlw	48
   652  000AE8  EC1C  F009         	call	_char2LCD
   653  000AEC                     l72:
   654                           
   655                           ;main.c: 49:         pulsador=Botones13();
   656  000AEC  EC25  F007         	call	_Botones13	;wreg free
   657  000AF0  6E24               	movwf	_pulsador^0,c
   658  000AF2                     
   659                           ;main.c: 50:         if(pulsador==1){
   660  000AF2  0424               	decf	_pulsador^0,w,c
   661  000AF4  A4D8               	btfss	status,2,c
   662  000AF6  EF7F  F005         	goto	u1961
   663  000AFA  EF81  F005         	goto	u1960
   664  000AFE                     u1961:
   665  000AFE  EF87  F005         	goto	l2822
   666  000B02                     u1960:
   667  000B02                     
   668                           ;main.c: 51:             set_CURSOR(0x4F);
   669  000B02  0E4F               	movlw	79
   670  000B04  ECFA  F008         	call	_set_CURSOR
   671                           
   672                           ;main.c: 52:             char2LCD('1');
   673  000B08  0E31               	movlw	49
   674  000B0A  EC1C  F009         	call	_char2LCD
   675  000B0E                     l2822:
   676                           
   677                           ;main.c: 54:         if(pulsador==2){
   678  000B0E  0E02               	movlw	2
   679  000B10  1824               	xorwf	_pulsador^0,w,c
   680  000B12  A4D8               	btfss	status,2,c
   681  000B14  EF8E  F005         	goto	u1971
   682  000B18  EF90  F005         	goto	u1970
   683  000B1C                     u1971:
   684  000B1C  EF96  F005         	goto	l2826
   685  000B20                     u1970:
   686  000B20                     
   687                           ;main.c: 55:             set_CURSOR(0x4F);
   688  000B20  0E4F               	movlw	79
   689  000B22  ECFA  F008         	call	_set_CURSOR
   690                           
   691                           ;main.c: 56:             char2LCD('2');
   692  000B26  0E32               	movlw	50
   693  000B28  EC1C  F009         	call	_char2LCD
   694  000B2C                     l2826:
   695                           
   696                           ;main.c: 58:         if(pulsador==3){
   697  000B2C  0E03               	movlw	3
   698  000B2E  1824               	xorwf	_pulsador^0,w,c
   699  000B30  A4D8               	btfss	status,2,c
   700  000B32  EF9D  F005         	goto	u1981
   701  000B36  EF9F  F005         	goto	u1980
   702  000B3A                     u1981:
   703  000B3A  EFA5  F005         	goto	l2830
   704  000B3E                     u1980:
   705  000B3E                     
   706                           ;main.c: 59:             set_CURSOR(0x4F);
   707  000B3E  0E4F               	movlw	79
   708  000B40  ECFA  F008         	call	_set_CURSOR
   709                           
   710                           ;main.c: 60:             char2LCD('3');
   711  000B44  0E33               	movlw	51
   712  000B46  EC1C  F009         	call	_char2LCD
   713  000B4A                     l2830:
   714                           
   715                           ;main.c: 62:         if(pulsador==4){
   716  000B4A  0E04               	movlw	4
   717  000B4C  1824               	xorwf	_pulsador^0,w,c
   718  000B4E  A4D8               	btfss	status,2,c
   719  000B50  EFAC  F005         	goto	u1991
   720  000B54  EFAE  F005         	goto	u1990
   721  000B58                     u1991:
   722  000B58  EFB4  F005         	goto	l2834
   723  000B5C                     u1990:
   724  000B5C                     
   725                           ;main.c: 63:             set_CURSOR(0x4F);
   726  000B5C  0E4F               	movlw	79
   727  000B5E  ECFA  F008         	call	_set_CURSOR
   728                           
   729                           ;main.c: 64:             char2LCD('4');
   730  000B62  0E34               	movlw	52
   731  000B64  EC1C  F009         	call	_char2LCD
   732  000B68                     l2834:
   733                           
   734                           ;main.c: 72:         if(tiempo==0){
   735  000B68  5007               	movf	_tiempo^0,w,c
   736  000B6A  1008               	iorwf	(_tiempo+1)^0,w,c
   737  000B6C  A4D8               	btfss	status,2,c
   738  000B6E  EFBB  F005         	goto	u2001
   739  000B72  EFBD  F005         	goto	u2000
   740  000B76                     u2001:
   741  000B76  EFEB  F005         	goto	l77
   742  000B7A                     u2000:
   743  000B7A                     
   744                           ;main.c: 73:             tiempo=500;
   745  000B7A  0E01               	movlw	1
   746  000B7C  6E08               	movwf	(_tiempo+1)^0,c
   747  000B7E  0EF4               	movlw	244
   748  000B80  6E07               	movwf	_tiempo^0,c
   749  000B82                     
   750                           ;main.c: 74:             PORTEbits.RE0=~PORTEbits.RE0;
   751  000B82  B084               	btfsc	132,0,c	;volatile
   752  000B84  EFC6  F005         	goto	u2011
   753  000B88  EFC9  F005         	goto	u2010
   754  000B8C                     u2011:
   755  000B8C  0E01               	movlw	1
   756  000B8E  EFCA  F005         	goto	u2016
   757  000B92                     u2010:
   758  000B92  0E00               	movlw	0
   759  000B94                     u2016:
   760  000B94  0AFF               	xorlw	255
   761  000B96  6E43               	movwf	??_main^0,c
   762  000B98  5084               	movf	132,w,c	;volatile
   763  000B9A  1843               	xorwf	??_main^0,w,c
   764  000B9C  0BFE               	andlw	-2
   765  000B9E  1843               	xorwf	??_main^0,w,c
   766  000BA0  6E84               	movwf	132,c	;volatile
   767  000BA2                     
   768                           ;main.c: 76:             if(numero<9)numero++;
   769  000BA2  5006               	movf	(_numero+1)^0,w,c
   770  000BA4  E107               	bnz	u2021
   771  000BA6  0E09               	movlw	9
   772  000BA8  5C05               	subwf	_numero^0,w,c
   773  000BAA  B0D8               	btfsc	status,0,c
   774  000BAC  EFDA  F005         	goto	u2021
   775  000BB0  EFDC  F005         	goto	u2020
   776  000BB4                     u2021:
   777  000BB4  EFE0  F005         	goto	l2844
   778  000BB8                     u2020:
   779  000BB8  4A05               	infsnz	_numero^0,f,c
   780  000BBA  2A06               	incf	(_numero+1)^0,f,c
   781  000BBC  EFE4  F005         	goto	l2846
   782  000BC0                     l2844:
   783  000BC0  0E00               	movlw	0
   784  000BC2  6E06               	movwf	(_numero+1)^0,c
   785  000BC4  0E00               	movlw	0
   786  000BC6  6E05               	movwf	_numero^0,c
   787  000BC8                     l2846:
   788                           
   789                           ;main.c: 79:             set_CURSOR(0x0F);
   790  000BC8  0E0F               	movlw	15
   791  000BCA  ECFA  F008         	call	_set_CURSOR
   792  000BCE                     
   793                           ;main.c: 80:             char2LCD(numero+48);
   794  000BCE  5005               	movf	_numero^0,w,c
   795  000BD0  0F30               	addlw	48
   796  000BD2  EC1C  F009         	call	_char2LCD
   797  000BD6                     l77:
   798                           
   799                           ;main.c: 87:         if(tiempo_lectura_adc==0){
   800  000BD6  5023               	movf	_tiempo_lectura_adc^0,w,c
   801  000BD8  A4D8               	btfss	status,2,c
   802  000BDA  EFF1  F005         	goto	u2031
   803  000BDE  EFF3  F005         	goto	u2030
   804  000BE2                     u2031:
   805  000BE2  EF64  F005         	goto	l2812
   806  000BE6                     u2030:
   807  000BE6                     
   808                           ;main.c: 88:             tiempo_lectura_adc=20;
   809  000BE6  0E14               	movlw	20
   810  000BE8  6E23               	movwf	_tiempo_lectura_adc^0,c
   811  000BEA                     
   812                           ;main.c: 89:             valor_pote=obtener_ADC8();
   813  000BEA  EC5A  F009         	call	_obtener_ADC8	;wreg free
   814  000BEE  6E1F               	movwf	_valor_pote^0,c
   815  000BF0                     
   816                           ;main.c: 91:             cent=valor_pote/100;
   817  000BF0  C01F  F02F         	movff	_valor_pote,___awdiv@dividend
   818  000BF4  6A30               	clrf	(___awdiv@dividend+1)^0,c
   819  000BF6  0E00               	movlw	0
   820  000BF8  6E32               	movwf	(___awdiv@divisor+1)^0,c
   821  000BFA  0E64               	movlw	100
   822  000BFC  6E31               	movwf	___awdiv@divisor^0,c
   823  000BFE  ECD8  F007         	call	___awdiv	;wreg free
   824  000C02  502F               	movf	?___awdiv^0,w,c
   825  000C04  6E21               	movwf	_cent^0,c
   826  000C06                     
   827                           ;main.c: 92:             dec=(valor_pote%100)/10;
   828  000C06  0E00               	movlw	0
   829  000C08  6E2C               	movwf	(___awmod@divisor+1)^0,c
   830  000C0A  0E64               	movlw	100
   831  000C0C  6E2B               	movwf	___awmod@divisor^0,c
   832  000C0E  C01F  F029         	movff	_valor_pote,___awmod@dividend
   833  000C12  6A2A               	clrf	(___awmod@dividend+1)^0,c
   834  000C14  EC3A  F008         	call	___awmod	;wreg free
   835  000C18  C029  F02F         	movff	?___awmod,___awdiv@dividend
   836  000C1C  C02A  F030         	movff	?___awmod+1,___awdiv@dividend+1
   837  000C20  0E00               	movlw	0
   838  000C22  6E32               	movwf	(___awdiv@divisor+1)^0,c
   839  000C24  0E0A               	movlw	10
   840  000C26  6E31               	movwf	___awdiv@divisor^0,c
   841  000C28  ECD8  F007         	call	___awdiv	;wreg free
   842  000C2C  502F               	movf	?___awdiv^0,w,c
   843  000C2E  6E22               	movwf	_dec^0,c
   844  000C30                     
   845                           ;main.c: 93:             uni=(valor_pote%100)%10;
   846  000C30  0E00               	movlw	0
   847  000C32  6E2C               	movwf	(___awmod@divisor+1)^0,c
   848  000C34  0E64               	movlw	100
   849  000C36  6E2B               	movwf	___awmod@divisor^0,c
   850  000C38  C01F  F029         	movff	_valor_pote,___awmod@dividend
   851  000C3C  6A2A               	clrf	(___awmod@dividend+1)^0,c
   852  000C3E  EC3A  F008         	call	___awmod	;wreg free
   853  000C42  C029  F044         	movff	?___awmod,_main$2691
   854  000C46  C02A  F045         	movff	?___awmod+1,_main$2691+1
   855  000C4A                     
   856                           ;main.c: 93:             uni=(valor_pote%100)%10;
   857  000C4A  C044  F029         	movff	_main$2691,___awmod@dividend
   858  000C4E  C045  F02A         	movff	_main$2691+1,___awmod@dividend+1
   859  000C52  0E00               	movlw	0
   860  000C54  6E2C               	movwf	(___awmod@divisor+1)^0,c
   861  000C56  0E0A               	movlw	10
   862  000C58  6E2B               	movwf	___awmod@divisor^0,c
   863  000C5A  EC3A  F008         	call	___awmod	;wreg free
   864  000C5E  5029               	movf	?___awmod^0,w,c
   865  000C60  6E20               	movwf	_uni^0,c
   866  000C62                     
   867                           ;main.c: 95:             set_CURSOR(0x45);
   868  000C62  0E45               	movlw	69
   869  000C64  ECFA  F008         	call	_set_CURSOR
   870  000C68                     
   871                           ;main.c: 96:             char2LCD(cent+48);
   872  000C68  5021               	movf	_cent^0,w,c
   873  000C6A  0F30               	addlw	48
   874  000C6C  EC1C  F009         	call	_char2LCD
   875  000C70                     
   876                           ;main.c: 97:             set_CURSOR(0x46);
   877  000C70  0E46               	movlw	70
   878  000C72  ECFA  F008         	call	_set_CURSOR
   879  000C76                     
   880                           ;main.c: 98:             char2LCD(dec+48);
   881  000C76  5022               	movf	_dec^0,w,c
   882  000C78  0F30               	addlw	48
   883  000C7A  EC1C  F009         	call	_char2LCD
   884  000C7E                     
   885                           ;main.c: 99:             set_CURSOR(0x47);
   886  000C7E  0E47               	movlw	71
   887  000C80  ECFA  F008         	call	_set_CURSOR
   888  000C84                     
   889                           ;main.c: 100:             char2LCD(uni+48);
   890  000C84  5020               	movf	_uni^0,w,c
   891  000C86  0F30               	addlw	48
   892  000C88  EC1C  F009         	call	_char2LCD
   893  000C8C  EF64  F005         	goto	l2812
   894  000C90  EF07  F000         	goto	start
   895  000C94                     __end_of_main:
   896                           	callstack 0
   897                           
   898 ;; *************** function _tecladoIni13 *****************
   899 ;; Defined at:
   900 ;;		line 35 in file "teclado.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;		None
   903 ;; Auto vars:     Size  Location     Type
   904 ;;		None
   905 ;; Return value:  Size  Location     Type
   906 ;;                  1    wreg      void 
   907 ;; Registers used:
   908 ;;		wreg, status,2
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   914 ;;      Params:         0       0       0       0       0       0       0       0       0
   915 ;;      Locals:         0       0       0       0       0       0       0       0       0
   916 ;;      Temps:          0       0       0       0       0       0       0       0       0
   917 ;;      Totals:         0       0       0       0       0       0       0       0       0
   918 ;;Total ram usage:        0 bytes
   919 ;; Hardware stack levels used: 1
   920 ;; Hardware stack levels required when called: 2
   921 ;; This function calls:
   922 ;;		Nothing
   923 ;; This function is called by:
   924 ;;		_main
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928                           	psect	text1
   929  001354                     __ptext1:
   930                           	callstack 0
   931  001354                     _tecladoIni13:
   932                           	callstack 28
   933  001354                     
   934                           ;teclado.c: 37:     LATB = 0;
   935  001354  0E00               	movlw	0
   936  001356  6E8A               	movwf	138,c	;volatile
   937                           
   938                           ;teclado.c: 38:     PORTB = 0;
   939  001358  0E00               	movlw	0
   940  00135A  6E81               	movwf	129,c	;volatile
   941                           
   942                           ;teclado.c: 39:     TRISB = 0xF0;
   943  00135C  0EF0               	movlw	240
   944  00135E  6E93               	movwf	147,c	;volatile
   945  001360                     
   946                           ;teclado.c: 40:     RBPU = 0;
   947  001360  9EF1               	bcf	4081,7,c	;volatile
   948  001362                     
   949                           ;teclado.c: 41:     RBIP = 1;
   950  001362  80F1               	bsf	4081,0,c	;volatile
   951  001364                     
   952                           ;teclado.c: 42:     RBIF = 0;
   953  001364  90F2               	bcf	4082,0,c	;volatile
   954  001366                     
   955                           ;teclado.c: 43:     RBIE = 1;
   956  001366  86F2               	bsf	4082,3,c	;volatile
   957  001368  0012               	return		;funcret
   958  00136A                     __end_of_tecladoIni13:
   959                           	callstack 0
   960                           
   961 ;; *************** function _tecla *****************
   962 ;; Defined at:
   963 ;;		line 45 in file "teclado.c"
   964 ;; Parameters:    Size  Location     Type
   965 ;;		None
   966 ;; Auto vars:     Size  Location     Type
   967 ;;  tecla_KB        1    2[COMRAM] unsigned char 
   968 ;; Return value:  Size  Location     Type
   969 ;;                  1    wreg      unsigned char 
   970 ;; Registers used:
   971 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
   972 ;; Tracked objects:
   973 ;;		On entry : 0/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   977 ;;      Params:         0       0       0       0       0       0       0       0       0
   978 ;;      Locals:         1       0       0       0       0       0       0       0       0
   979 ;;      Temps:          2       0       0       0       0       0       0       0       0
   980 ;;      Totals:         3       0       0       0       0       0       0       0       0
   981 ;;Total ram usage:        3 bytes
   982 ;; Hardware stack levels used: 1
   983 ;; Hardware stack levels required when called: 2
   984 ;; This function calls:
   985 ;;		Nothing
   986 ;; This function is called by:
   987 ;;		_main
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           	psect	text2
   992  000822                     __ptext2:
   993                           	callstack 0
   994  000822                     _tecla:
   995                           	callstack 28
   996  000822                     
   997                           ;teclado.c: 46:  static unsigned char status_KB = KB_LIBRE;;teclado.c: 47:  unsigned cha
      +                          r tecla_KB = 0xFF;
   998  000822  682B               	setf	tecla@tecla_KB^0,c
   999                           
  1000                           ;teclado.c: 54:     switch (status_KB){
  1001  000824  EF22  F005         	goto	l2628
  1002  000828                     l2550:
  1003                           
  1004                           ;teclado.c: 57:    if (flag_kb){
  1005  000828  500D               	movf	_flag_kb^0,w,c	;volatile
  1006  00082A  B4D8               	btfsc	status,2,c
  1007  00082C  EF1A  F004         	goto	u1421
  1008  000830  EF1C  F004         	goto	u1420
  1009  000834                     u1421:
  1010  000834  EF3F  F005         	goto	l2630
  1011  000838                     u1420:
  1012  000838                     
  1013                           ;teclado.c: 58:     flag_kb = 0;
  1014  000838  0E00               	movlw	0
  1015  00083A  6E0D               	movwf	_flag_kb^0,c	;volatile
  1016  00083C                     
  1017                           ;teclado.c: 59:     fila = 0xFF;
  1018  00083C  6847               	setf	_fila^0,c
  1019  00083E                     
  1020                           ;teclado.c: 60:     col = 0xFF;
  1021  00083E  6846               	setf	_col^0,c
  1022  000840                     
  1023                           ;teclado.c: 61:     tecla_KB = 0xFF;
  1024  000840  682B               	setf	tecla@tecla_KB^0,c
  1025                           
  1026                           ;teclado.c: 62:     delay_kb = 30;
  1027  000842  0E1E               	movlw	30
  1028  000844  6E0C               	movwf	_delay_kb^0,c	;volatile
  1029                           
  1030                           ;teclado.c: 63:     status_KB = KB_ESPERA;
  1031  000846  0E01               	movlw	1
  1032  000848  6E0B               	movwf	tecla@status_KB^0,c
  1033  00084A  EF3F  F005         	goto	l2630
  1034  00084E                     l2560:
  1035                           
  1036                           ;teclado.c: 71:    if (!delay_kb){
  1037  00084E  500C               	movf	_delay_kb^0,w,c	;volatile
  1038  000850  A4D8               	btfss	status,2,c
  1039  000852  EF2D  F004         	goto	u1431
  1040  000856  EF2F  F004         	goto	u1430
  1041  00085A                     u1431:
  1042  00085A  EF3F  F005         	goto	l2630
  1043  00085E                     u1430:
  1044  00085E                     
  1045                           ;teclado.c: 72:                 status_KB = KB_DETECTA;
  1046  00085E  0E02               	movlw	2
  1047  000860  6E0B               	movwf	tecla@status_KB^0,c
  1048  000862  EF3F  F005         	goto	l2630
  1049  000866                     l671:
  1050                           
  1051                           ;teclado.c: 82:    if (!PORTBbits.RB4){
  1052  000866  B881               	btfsc	129,4,c	;volatile
  1053  000868  EF38  F004         	goto	u1441
  1054  00086C  EF3A  F004         	goto	u1440
  1055  000870                     u1441:
  1056  000870  EF3E  F004         	goto	l672
  1057  000874                     u1440:
  1058  000874                     
  1059                           ;teclado.c: 83:                 fila = 0;
  1060  000874  0E00               	movlw	0
  1061  000876  6E47               	movwf	_fila^0,c
  1062                           
  1063                           ;teclado.c: 85:             }
  1064  000878  EF5F  F004         	goto	l2572
  1065  00087C                     l672:
  1066  00087C  BA81               	btfsc	129,5,c	;volatile
  1067  00087E  EF43  F004         	goto	u1451
  1068  000882  EF45  F004         	goto	u1450
  1069  000886                     u1451:
  1070  000886  EF49  F004         	goto	l674
  1071  00088A                     u1450:
  1072  00088A                     
  1073                           ;teclado.c: 87:                 fila = 1;
  1074  00088A  0E01               	movlw	1
  1075  00088C  6E47               	movwf	_fila^0,c
  1076                           
  1077                           ;teclado.c: 89:             }
  1078  00088E  EF5F  F004         	goto	l2572
  1079  000892                     l674:
  1080  000892  BC81               	btfsc	129,6,c	;volatile
  1081  000894  EF4E  F004         	goto	u1461
  1082  000898  EF50  F004         	goto	u1460
  1083  00089C                     u1461:
  1084  00089C  EF54  F004         	goto	l676
  1085  0008A0                     u1460:
  1086  0008A0                     
  1087                           ;teclado.c: 91:                 fila = 2;
  1088  0008A0  0E02               	movlw	2
  1089  0008A2  6E47               	movwf	_fila^0,c
  1090                           
  1091                           ;teclado.c: 93:             }
  1092  0008A4  EF5F  F004         	goto	l2572
  1093  0008A8                     l676:
  1094  0008A8  BE81               	btfsc	129,7,c	;volatile
  1095  0008AA  EF59  F004         	goto	u1471
  1096  0008AE  EF5B  F004         	goto	u1470
  1097  0008B2                     u1471:
  1098  0008B2  EF5F  F004         	goto	l675
  1099  0008B6                     u1470:
  1100  0008B6                     
  1101                           ;teclado.c: 95:                 fila = 3;
  1102  0008B6  0E03               	movlw	3
  1103  0008B8  6E47               	movwf	_fila^0,c
  1104  0008BA  EF5F  F004         	goto	l2572
  1105  0008BE                     l675:
  1106  0008BE                     l2572:
  1107                           
  1108                           ;teclado.c: 102:             if (fila == 0xFF){
  1109  0008BE  2847               	incf	_fila^0,w,c
  1110  0008C0  A4D8               	btfss	status,2,c
  1111  0008C2  EF65  F004         	goto	u1481
  1112  0008C6  EF67  F004         	goto	u1480
  1113  0008CA                     u1481:
  1114  0008CA  EF6B  F004         	goto	l679
  1115  0008CE                     u1480:
  1116  0008CE                     l2574:
  1117                           
  1118                           ;teclado.c: 103:                 status_KB = KB_LIBRE;
  1119  0008CE  0E00               	movlw	0
  1120  0008D0  6E0B               	movwf	tecla@status_KB^0,c
  1121                           
  1122                           ;teclado.c: 104:             }
  1123  0008D2  EF3F  F005         	goto	l2630
  1124  0008D6                     l679:
  1125                           
  1126                           ;teclado.c: 110:     TRISBbits.RB0 = 1;
  1127  0008D6  8093               	bsf	147,0,c	;volatile
  1128                           
  1129                           ;teclado.c: 111:                   LATBbits.LB0=0;
  1130  0008D8  908A               	bcf	138,0,c	;volatile
  1131                           
  1132                           ;teclado.c: 112:     if (PORTBbits.RB4 && PORTBbits.RB5 && PORTBbits.RB6 && PORTBbits.RB
      +                          7){
  1133  0008DA  A881               	btfss	129,4,c	;volatile
  1134  0008DC  EF72  F004         	goto	u1491
  1135  0008E0  EF74  F004         	goto	u1490
  1136  0008E4                     u1491:
  1137  0008E4  EF8D  F004         	goto	l681
  1138  0008E8                     u1490:
  1139  0008E8  AA81               	btfss	129,5,c	;volatile
  1140  0008EA  EF79  F004         	goto	u1501
  1141  0008EE  EF7B  F004         	goto	u1500
  1142  0008F2                     u1501:
  1143  0008F2  EF8D  F004         	goto	l681
  1144  0008F6                     u1500:
  1145  0008F6  AC81               	btfss	129,6,c	;volatile
  1146  0008F8  EF80  F004         	goto	u1511
  1147  0008FC  EF82  F004         	goto	u1510
  1148  000900                     u1511:
  1149  000900  EF8D  F004         	goto	l681
  1150  000904                     u1510:
  1151  000904  AE81               	btfss	129,7,c	;volatile
  1152  000906  EF87  F004         	goto	u1521
  1153  00090A  EF89  F004         	goto	u1520
  1154  00090E                     u1521:
  1155  00090E  EF8D  F004         	goto	l681
  1156  000912                     u1520:
  1157  000912                     
  1158                           ;teclado.c: 113:      col = 0;
  1159  000912  0E00               	movlw	0
  1160  000914  6E46               	movwf	_col^0,c
  1161                           
  1162                           ;teclado.c: 117:     }else{
  1163  000916  EFCF  F004         	goto	l2600
  1164  00091A                     l681:
  1165                           
  1166                           ;teclado.c: 118:      TRISBbits.RB1 = 1;
  1167  00091A  8293               	bsf	147,1,c	;volatile
  1168                           
  1169                           ;teclado.c: 119:                    LATBbits.LB1=0;
  1170  00091C  928A               	bcf	138,1,c	;volatile
  1171                           
  1172                           ;teclado.c: 120:      if (PORTBbits.RB4 && PORTBbits.RB5 && PORTBbits.RB6 && PORTBbits.R
      +                          B7){
  1173  00091E  A881               	btfss	129,4,c	;volatile
  1174  000920  EF94  F004         	goto	u1531
  1175  000924  EF96  F004         	goto	u1530
  1176  000928                     u1531:
  1177  000928  EFAF  F004         	goto	l683
  1178  00092C                     u1530:
  1179  00092C  AA81               	btfss	129,5,c	;volatile
  1180  00092E  EF9B  F004         	goto	u1541
  1181  000932  EF9D  F004         	goto	u1540
  1182  000936                     u1541:
  1183  000936  EFAF  F004         	goto	l683
  1184  00093A                     u1540:
  1185  00093A  AC81               	btfss	129,6,c	;volatile
  1186  00093C  EFA2  F004         	goto	u1551
  1187  000940  EFA4  F004         	goto	u1550
  1188  000944                     u1551:
  1189  000944  EFAF  F004         	goto	l683
  1190  000948                     u1550:
  1191  000948  AE81               	btfss	129,7,c	;volatile
  1192  00094A  EFA9  F004         	goto	u1561
  1193  00094E  EFAB  F004         	goto	u1560
  1194  000952                     u1561:
  1195  000952  EFAF  F004         	goto	l683
  1196  000956                     u1560:
  1197  000956                     
  1198                           ;teclado.c: 121:       col = 1;
  1199  000956  0E01               	movlw	1
  1200  000958  6E46               	movwf	_col^0,c
  1201                           
  1202                           ;teclado.c: 123:      }else{
  1203  00095A  EFCF  F004         	goto	l2600
  1204  00095E                     l683:
  1205                           
  1206                           ;teclado.c: 124:       TRISBbits.RB2 = 1;
  1207  00095E  8493               	bsf	147,2,c	;volatile
  1208                           
  1209                           ;teclado.c: 125:                            LATBbits.LB2=0;
  1210  000960  948A               	bcf	138,2,c	;volatile
  1211                           
  1212                           ;teclado.c: 126:       if (PORTBbits.RB4 && PORTBbits.RB5 && PORTBbits.RB6 && PORTBbits.
      +                          RB7){
  1213  000962  A881               	btfss	129,4,c	;volatile
  1214  000964  EFB6  F004         	goto	u1571
  1215  000968  EFB8  F004         	goto	u1570
  1216  00096C                     u1571:
  1217  00096C  EFCF  F004         	goto	l2600
  1218  000970                     u1570:
  1219  000970  AA81               	btfss	129,5,c	;volatile
  1220  000972  EFBD  F004         	goto	u1581
  1221  000976  EFBF  F004         	goto	u1580
  1222  00097A                     u1581:
  1223  00097A  EFCF  F004         	goto	l2600
  1224  00097E                     u1580:
  1225  00097E  AC81               	btfss	129,6,c	;volatile
  1226  000980  EFC4  F004         	goto	u1591
  1227  000984  EFC6  F004         	goto	u1590
  1228  000988                     u1591:
  1229  000988  EFCF  F004         	goto	l2600
  1230  00098C                     u1590:
  1231  00098C  AE81               	btfss	129,7,c	;volatile
  1232  00098E  EFCB  F004         	goto	u1601
  1233  000992  EFCD  F004         	goto	u1600
  1234  000996                     u1601:
  1235  000996  EFCF  F004         	goto	l2600
  1236  00099A                     u1600:
  1237  00099A                     
  1238                           ;teclado.c: 127:        col = 2;
  1239  00099A  0E02               	movlw	2
  1240  00099C  6E46               	movwf	_col^0,c
  1241  00099E                     l2600:
  1242                           
  1243                           ;teclado.c: 133:     TRISBbits.RB0=0;
  1244  00099E  9093               	bcf	147,0,c	;volatile
  1245  0009A0                     
  1246                           ;teclado.c: 134:     TRISBbits.RB1=0;
  1247  0009A0  9293               	bcf	147,1,c	;volatile
  1248  0009A2                     
  1249                           ;teclado.c: 135:     TRISBbits.RB2=0;
  1250  0009A2  9493               	bcf	147,2,c	;volatile
  1251  0009A4                     
  1252                           ;teclado.c: 137:                 if (col == 0xFF){
  1253  0009A4  2846               	incf	_col^0,w,c
  1254  0009A6  A4D8               	btfss	status,2,c
  1255  0009A8  EFD8  F004         	goto	u1611
  1256  0009AC  EFDA  F004         	goto	u1610
  1257  0009B0                     u1611:
  1258  0009B0  EFDC  F004         	goto	l2610
  1259  0009B4                     u1610:
  1260  0009B4  EF67  F004         	goto	l2574
  1261  0009B8                     l2610:
  1262                           
  1263                           ;teclado.c: 147:      delay_kb = 50;
  1264  0009B8  0E32               	movlw	50
  1265  0009BA  6E0C               	movwf	_delay_kb^0,c	;volatile
  1266                           
  1267                           ;teclado.c: 148:      status_KB = KB_LIBERA;
  1268  0009BC  0E03               	movlw	3
  1269  0009BE  6E0B               	movwf	tecla@status_KB^0,c
  1270  0009C0                     
  1271                           ;teclado.c: 149:      tecla_KB = teclas[fila][col];
  1272  0009C0  5047               	movf	_fila^0,w,c
  1273  0009C2  0D03               	mullw	3
  1274  0009C4  0E01               	movlw	low _teclas
  1275  0009C6  6E29               	movwf	??_tecla^0,c
  1276  0009C8  0E08               	movlw	high _teclas
  1277  0009CA  6E2A               	movwf	(??_tecla+1)^0,c
  1278  0009CC  50F3               	movf	243,w,c
  1279  0009CE  2629               	addwf	??_tecla^0,f,c
  1280  0009D0  50F4               	movf	244,w,c
  1281  0009D2  222A               	addwfc	(??_tecla+1)^0,f,c
  1282  0009D4  5046               	movf	_col^0,w,c
  1283  0009D6  2629               	addwf	??_tecla^0,f,c
  1284  0009D8  0E00               	movlw	0
  1285  0009DA  222A               	addwfc	(??_tecla+1)^0,f,c
  1286  0009DC  C029  FFF6         	movff	??_tecla,tblptrl
  1287  0009E0  C02A  FFF7         	movff	??_tecla+1,tblptrh
  1288  0009E4                     	if	0	;tblptru may be non-zero
  1289  0009E4                     	endif
  1290  0009E4                     	if	0	;tblptru may be non-zero
  1291  0009E4                     	endif
  1292  0009E4  0008               	tblrd		*
  1293  0009E6  CFF5 F02B          	movff	tablat,tecla@tecla_KB
  1294  0009EA  EF3F  F005         	goto	l2630
  1295  0009EE                     l688:
  1296                           
  1297                           ;teclado.c: 157:             if ((PORTBbits.RB4 && PORTBbits.RB5 && PORTBbits.RB6 && POR
      +                          TBbits.RB7)&&(!delay_kb)) status_KB = KB_LIBRE;
  1298  0009EE  A881               	btfss	129,4,c	;volatile
  1299  0009F0  EFFC  F004         	goto	u1621
  1300  0009F4  EFFE  F004         	goto	u1620
  1301  0009F8                     u1621:
  1302  0009F8  EF3F  F005         	goto	l2630
  1303  0009FC                     u1620:
  1304  0009FC  AA81               	btfss	129,5,c	;volatile
  1305  0009FE  EF03  F005         	goto	u1631
  1306  000A02  EF05  F005         	goto	u1630
  1307  000A06                     u1631:
  1308  000A06  EF3F  F005         	goto	l2630
  1309  000A0A                     u1630:
  1310  000A0A  AC81               	btfss	129,6,c	;volatile
  1311  000A0C  EF0A  F005         	goto	u1641
  1312  000A10  EF0C  F005         	goto	u1640
  1313  000A14                     u1641:
  1314  000A14  EF3F  F005         	goto	l2630
  1315  000A18                     u1640:
  1316  000A18  AE81               	btfss	129,7,c	;volatile
  1317  000A1A  EF11  F005         	goto	u1651
  1318  000A1E  EF13  F005         	goto	u1650
  1319  000A22                     u1651:
  1320  000A22  EF3F  F005         	goto	l2630
  1321  000A26                     u1650:
  1322  000A26  500C               	movf	_delay_kb^0,w,c	;volatile
  1323  000A28  A4D8               	btfss	status,2,c
  1324  000A2A  EF19  F005         	goto	u1661
  1325  000A2E  EF1B  F005         	goto	u1660
  1326  000A32                     u1661:
  1327  000A32  EF3F  F005         	goto	l2630
  1328  000A36                     u1660:
  1329  000A36  EF67  F004         	goto	l2574
  1330  000A3A                     l690:
  1331                           
  1332                           ;teclado.c: 165:    fila = 0xFF;
  1333  000A3A  6847               	setf	_fila^0,c
  1334                           
  1335                           ;teclado.c: 166:    col = 0xFF;
  1336  000A3C  6846               	setf	_col^0,c
  1337                           
  1338                           ;teclado.c: 167:    tecla_KB = 0xFF;
  1339  000A3E  682B               	setf	tecla@tecla_KB^0,c
  1340  000A40  EF67  F004         	goto	l2574
  1341  000A44                     l2628:
  1342  000A44  500B               	movf	tecla@status_KB^0,w,c
  1343  000A46  6E29               	movwf	??_tecla^0,c
  1344  000A48  6A2A               	clrf	(??_tecla+1)^0,c
  1345                           
  1346                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1347                           ; Switch size 1, requested type "simple"
  1348                           ; Number of cases is 1, Range of values is 0 to 0
  1349                           ; switch strategies available:
  1350                           ; Name         Instructions Cycles
  1351                           ; simple_byte            4     3 (average)
  1352                           ;	Chosen strategy is simple_byte
  1353  000A4A  502A               	movf	(??_tecla+1)^0,w,c
  1354  000A4C  0A00               	xorlw	0	; case 0
  1355  000A4E  B4D8               	btfsc	status,2,c
  1356  000A50  EF2C  F005         	goto	l2912
  1357  000A54  EF1D  F005         	goto	l690
  1358  000A58                     l2912:
  1359                           
  1360                           ; Switch size 1, requested type "simple"
  1361                           ; Number of cases is 4, Range of values is 0 to 3
  1362                           ; switch strategies available:
  1363                           ; Name         Instructions Cycles
  1364                           ; simple_byte           13     7 (average)
  1365                           ;	Chosen strategy is simple_byte
  1366  000A58  5029               	movf	??_tecla^0,w,c
  1367  000A5A  0A00               	xorlw	0	; case 0
  1368  000A5C  B4D8               	btfsc	status,2,c
  1369  000A5E  EF14  F004         	goto	l2550
  1370  000A62  0A01               	xorlw	1	; case 1
  1371  000A64  B4D8               	btfsc	status,2,c
  1372  000A66  EF27  F004         	goto	l2560
  1373  000A6A  0A03               	xorlw	3	; case 2
  1374  000A6C  B4D8               	btfsc	status,2,c
  1375  000A6E  EF33  F004         	goto	l671
  1376  000A72  0A01               	xorlw	1	; case 3
  1377  000A74  B4D8               	btfsc	status,2,c
  1378  000A76  EFF7  F004         	goto	l688
  1379  000A7A  EF1D  F005         	goto	l690
  1380  000A7E                     l2630:
  1381                           
  1382                           ;teclado.c: 172:  return tecla_KB;
  1383  000A7E  502B               	movf	tecla@tecla_KB^0,w,c
  1384  000A80  0012               	return		;funcret
  1385  000A82                     __end_of_tecla:
  1386                           	callstack 0
  1387                           
  1388 ;; *************** function _set_CURSOR *****************
  1389 ;; Defined at:
  1390 ;;		line 61 in file "lcd.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;  posi            1    wreg     unsigned char 
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;  posi            1    2[COMRAM] unsigned char 
  1395 ;;  i               4    3[COMRAM] unsigned long 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      void 
  1398 ;; Registers used:
  1399 ;;		wreg, status,2, status,0, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1405 ;;      Params:         0       0       0       0       0       0       0       0       0
  1406 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1407 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1408 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1409 ;;Total ram usage:        5 bytes
  1410 ;; Hardware stack levels used: 1
  1411 ;; Hardware stack levels required when called: 4
  1412 ;; This function calls:
  1413 ;;		_write_CMD
  1414 ;; This function is called by:
  1415 ;;		_main
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           	psect	text3
  1420  0011F4                     __ptext3:
  1421                           	callstack 0
  1422  0011F4                     _set_CURSOR:
  1423                           	callstack 26
  1424                           
  1425                           ;incstack = 0
  1426                           ;set_CURSOR@posi stored from wreg
  1427  0011F4  6E2B               	movwf	set_CURSOR@posi^0,c
  1428  0011F6                     
  1429                           ;lcd.c: 62:  posi |= 0x80;
  1430  0011F6  8E2B               	bsf	set_CURSOR@posi^0,7,c
  1431  0011F8                     
  1432                           ;lcd.c: 63:  write_CMD(posi);
  1433  0011F8  502B               	movf	set_CURSOR@posi^0,w,c
  1434  0011FA  ECD0  F009         	call	_write_CMD
  1435  0011FE                     
  1436                           ;lcd.c: 65:     for(unsigned long i=0; i<10000;i++);
  1437  0011FE  0E00               	movlw	0
  1438  001200  6E2C               	movwf	set_CURSOR@i^0,c
  1439  001202  0E00               	movlw	0
  1440  001204  6E2D               	movwf	(set_CURSOR@i+1)^0,c
  1441  001206  0E00               	movlw	0
  1442  001208  6E2E               	movwf	(set_CURSOR@i+2)^0,c
  1443  00120A  0E00               	movlw	0
  1444  00120C  6E2F               	movwf	(set_CURSOR@i+3)^0,c
  1445  00120E                     l2546:
  1446  00120E  0E01               	movlw	1
  1447  001210  262C               	addwf	set_CURSOR@i^0,f,c
  1448  001212  0E00               	movlw	0
  1449  001214  222D               	addwfc	(set_CURSOR@i+1)^0,f,c
  1450  001216  222E               	addwfc	(set_CURSOR@i+2)^0,f,c
  1451  001218  222F               	addwfc	(set_CURSOR@i+3)^0,f,c
  1452  00121A  502F               	movf	(set_CURSOR@i+3)^0,w,c
  1453  00121C  102E               	iorwf	(set_CURSOR@i+2)^0,w,c
  1454  00121E  E10B               	bnz	u1410
  1455  001220  0E10               	movlw	16
  1456  001222  5C2C               	subwf	set_CURSOR@i^0,w,c
  1457  001224  0E27               	movlw	39
  1458  001226  582D               	subwfb	(set_CURSOR@i+1)^0,w,c
  1459  001228  A0D8               	btfss	status,0,c
  1460  00122A  EF19  F009         	goto	u1411
  1461  00122E  EF1B  F009         	goto	u1410
  1462  001232                     u1411:
  1463  001232  EF07  F009         	goto	l2546
  1464  001236                     u1410:
  1465  001236  0012               	return		;funcret
  1466  001238                     __end_of_set_CURSOR:
  1467                           	callstack 0
  1468                           
  1469 ;; *************** function _obtener_ADC8 *****************
  1470 ;; Defined at:
  1471 ;;		line 126 in file "Tecnica1.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;		None
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;  GuardoTrisa     1    1[COMRAM] unsigned char 
  1476 ;;  GuardoPorta     1    0[COMRAM] unsigned char 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  1    wreg      unsigned char 
  1479 ;; Registers used:
  1480 ;;		wreg, status,2
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1486 ;;      Params:         0       0       0       0       0       0       0       0       0
  1487 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1488 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1489 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1490 ;;Total ram usage:        2 bytes
  1491 ;; Hardware stack levels used: 1
  1492 ;; Hardware stack levels required when called: 2
  1493 ;; This function calls:
  1494 ;;		Nothing
  1495 ;; This function is called by:
  1496 ;;		_main
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500                           	psect	text4
  1501  0012B4                     __ptext4:
  1502                           	callstack 0
  1503  0012B4                     _obtener_ADC8:
  1504                           	callstack 28
  1505  0012B4                     
  1506                           ;Tecnica1.c: 127:     unsigned char GuardoPorta,GuardoTrisa;;Tecnica1.c: 129:     Guardo
      +                          Porta = PORTA;
  1507  0012B4  CF80 F029          	movff	3968,obtener_ADC8@GuardoPorta	;volatile
  1508                           
  1509                           ;Tecnica1.c: 130:     GuardoTrisa = TRISA;
  1510  0012B8  CF92 F02A          	movff	3986,obtener_ADC8@GuardoTrisa	;volatile
  1511                           
  1512                           ;Tecnica1.c: 132:     TRISAbits.RA0=1;
  1513  0012BC  8092               	bsf	146,0,c	;volatile
  1514  0012BE                     
  1515                           ;Tecnica1.c: 133:     ADCON1 = 0x0E;
  1516  0012BE  0E0E               	movlw	14
  1517  0012C0  6EC1               	movwf	193,c	;volatile
  1518                           
  1519                           ;Tecnica1.c: 135:     ADCON2 = 0x2D;
  1520  0012C2  0E2D               	movlw	45
  1521  0012C4  6EC0               	movwf	192,c	;volatile
  1522  0012C6                     
  1523                           ;Tecnica1.c: 136:     ADCON0bits.ADON=1;
  1524  0012C6  80C2               	bsf	194,0,c	;volatile
  1525  0012C8                     
  1526                           ;Tecnica1.c: 137:     ADCON0bits.GO=1;
  1527  0012C8  82C2               	bsf	194,1,c	;volatile
  1528  0012CA                     l492:
  1529  0012CA  B2C2               	btfsc	194,1,c	;volatile
  1530  0012CC  EF6A  F009         	goto	u1821
  1531  0012D0  EF6C  F009         	goto	u1820
  1532  0012D4                     u1821:
  1533  0012D4  EF65  F009         	goto	l492
  1534  0012D8                     u1820:
  1535  0012D8                     
  1536                           ;Tecnica1.c: 141:     ADCON0bits.ADON=0;
  1537  0012D8  90C2               	bcf	194,0,c	;volatile
  1538  0012DA                     
  1539                           ;Tecnica1.c: 142:     ADCON1 = 0x0F;
  1540  0012DA  0E0F               	movlw	15
  1541  0012DC  6EC1               	movwf	193,c	;volatile
  1542  0012DE                     
  1543                           ;Tecnica1.c: 143:     LATA = GuardoPorta;
  1544  0012DE  C029  FF89         	movff	obtener_ADC8@GuardoPorta,3977	;volatile
  1545  0012E2                     
  1546                           ;Tecnica1.c: 144:     TRISA = GuardoTrisa;
  1547  0012E2  C02A  FF92         	movff	obtener_ADC8@GuardoTrisa,3986	;volatile
  1548                           
  1549                           ;Tecnica1.c: 146:     return ADRESH;
  1550  0012E6  50C4               	movf	196,w,c	;volatile
  1551  0012E8  0012               	return		;funcret
  1552  0012EA                     __end_of_obtener_ADC8:
  1553                           	callstack 0
  1554                           
  1555 ;; *************** function _msg2LCD *****************
  1556 ;; Defined at:
  1557 ;;		line 27 in file "lcd.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;  datos           2    2[COMRAM] PTR const unsigned char 
  1560 ;;		 -> STR_3(6), STR_2(6), STR_1(8), 
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;  i               4    4[COMRAM] unsigned long 
  1563 ;; Return value:  Size  Location     Type
  1564 ;;                  1    wreg      void 
  1565 ;; Registers used:
  1566 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1567 ;; Tracked objects:
  1568 ;;		On entry : 0/0
  1569 ;;		On exit  : 0/0
  1570 ;;		Unchanged: 0/0
  1571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1572 ;;      Params:         2       0       0       0       0       0       0       0       0
  1573 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1574 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1575 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1576 ;;Total ram usage:        6 bytes
  1577 ;; Hardware stack levels used: 1
  1578 ;; Hardware stack levels required when called: 4
  1579 ;; This function calls:
  1580 ;;		_write_DATA
  1581 ;; This function is called by:
  1582 ;;		_main
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           	psect	text5
  1587  001124                     __ptext5:
  1588                           	callstack 0
  1589  001124                     _msg2LCD:
  1590                           	callstack 26
  1591  001124                     
  1592                           ;lcd.c: 29:  while (*datos != 0){
  1593  001124  EFBA  F008         	goto	l2534
  1594  001128                     l2522:
  1595                           
  1596                           ;lcd.c: 30:   write_DATA(*datos);
  1597  001128  C02B  FFF6         	movff	msg2LCD@datos,tblptrl
  1598  00112C  C02C  FFF7         	movff	msg2LCD@datos+1,tblptrh
  1599  001130                     	if	0	;tblptru may be non-zero
  1600  001130                     	endif
  1601  001130                     	if	0	;tblptru may be non-zero
  1602  001130                     	endif
  1603  001130  0008               	tblrd		*
  1604  001132  50F5               	movf	tablat,w,c
  1605  001134  ECC9  F009         	call	_write_DATA
  1606  001138                     
  1607                           ;lcd.c: 32:         for(unsigned long i=0; i<1000;i++);
  1608  001138  0E00               	movlw	0
  1609  00113A  6E2D               	movwf	msg2LCD@i^0,c
  1610  00113C  0E00               	movlw	0
  1611  00113E  6E2E               	movwf	(msg2LCD@i+1)^0,c
  1612  001140  0E00               	movlw	0
  1613  001142  6E2F               	movwf	(msg2LCD@i+2)^0,c
  1614  001144  0E00               	movlw	0
  1615  001146  6E30               	movwf	(msg2LCD@i+3)^0,c
  1616  001148                     l2530:
  1617  001148  0E01               	movlw	1
  1618  00114A  262D               	addwf	msg2LCD@i^0,f,c
  1619  00114C  0E00               	movlw	0
  1620  00114E  222E               	addwfc	(msg2LCD@i+1)^0,f,c
  1621  001150  222F               	addwfc	(msg2LCD@i+2)^0,f,c
  1622  001152  2230               	addwfc	(msg2LCD@i+3)^0,f,c
  1623  001154  5030               	movf	(msg2LCD@i+3)^0,w,c
  1624  001156  102F               	iorwf	(msg2LCD@i+2)^0,w,c
  1625  001158  E10B               	bnz	u1390
  1626  00115A  0EE8               	movlw	232
  1627  00115C  5C2D               	subwf	msg2LCD@i^0,w,c
  1628  00115E  0E03               	movlw	3
  1629  001160  582E               	subwfb	(msg2LCD@i+1)^0,w,c
  1630  001162  A0D8               	btfss	status,0,c
  1631  001164  EFB6  F008         	goto	u1391
  1632  001168  EFB8  F008         	goto	u1390
  1633  00116C                     u1391:
  1634  00116C  EFA4  F008         	goto	l2530
  1635  001170                     u1390:
  1636  001170                     
  1637                           ;lcd.c: 33:   datos++;
  1638  001170  4A2B               	infsnz	msg2LCD@datos^0,f,c
  1639  001172  2A2C               	incf	(msg2LCD@datos+1)^0,f,c
  1640  001174                     l2534:
  1641                           
  1642                           ;lcd.c: 29:  while (*datos != 0){
  1643  001174  C02B  FFF6         	movff	msg2LCD@datos,tblptrl
  1644  001178  C02C  FFF7         	movff	msg2LCD@datos+1,tblptrh
  1645  00117C                     	if	0	;tblptru may be non-zero
  1646  00117C                     	endif
  1647  00117C                     	if	0	;tblptru may be non-zero
  1648  00117C                     	endif
  1649  00117C  0008               	tblrd		*
  1650  00117E  50F5               	movf	tablat,w,c
  1651  001180  0900               	iorlw	0
  1652  001182  A4D8               	btfss	status,2,c
  1653  001184  EFC6  F008         	goto	u1401
  1654  001188  EFC8  F008         	goto	u1400
  1655  00118C                     u1401:
  1656  00118C  EF94  F008         	goto	l2522
  1657  001190                     u1400:
  1658  001190  0012               	return		;funcret
  1659  001192                     __end_of_msg2LCD:
  1660                           	callstack 0
  1661                           
  1662 ;; *************** function _char2LCD *****************
  1663 ;; Defined at:
  1664 ;;		line 39 in file "lcd.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;  dato            1    wreg     unsigned char 
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;  dato            1    2[COMRAM] unsigned char 
  1669 ;;  i               4    3[COMRAM] unsigned long 
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      void 
  1672 ;; Registers used:
  1673 ;;		wreg, status,2, status,0, cstack
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1679 ;;      Params:         0       0       0       0       0       0       0       0       0
  1680 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1681 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1682 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1683 ;;Total ram usage:        5 bytes
  1684 ;; Hardware stack levels used: 1
  1685 ;; Hardware stack levels required when called: 4
  1686 ;; This function calls:
  1687 ;;		_write_DATA
  1688 ;; This function is called by:
  1689 ;;		_main
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           	psect	text6
  1694  001238                     __ptext6:
  1695                           	callstack 0
  1696  001238                     _char2LCD:
  1697                           	callstack 26
  1698                           
  1699                           ;incstack = 0
  1700                           ;char2LCD@dato stored from wreg
  1701  001238  6E2B               	movwf	char2LCD@dato^0,c
  1702  00123A                     
  1703                           ;lcd.c: 41:  write_DATA(dato);
  1704  00123A  502B               	movf	char2LCD@dato^0,w,c
  1705  00123C  ECC9  F009         	call	_write_DATA
  1706  001240                     
  1707                           ;lcd.c: 43:     for(unsigned long i=0; i<1000;i++);
  1708  001240  0E00               	movlw	0
  1709  001242  6E2C               	movwf	char2LCD@i^0,c
  1710  001244  0E00               	movlw	0
  1711  001246  6E2D               	movwf	(char2LCD@i+1)^0,c
  1712  001248  0E00               	movlw	0
  1713  00124A  6E2E               	movwf	(char2LCD@i+2)^0,c
  1714  00124C  0E00               	movlw	0
  1715  00124E  6E2F               	movwf	(char2LCD@i+3)^0,c
  1716  001250                     l2646:
  1717  001250  0E01               	movlw	1
  1718  001252  262C               	addwf	char2LCD@i^0,f,c
  1719  001254  0E00               	movlw	0
  1720  001256  222D               	addwfc	(char2LCD@i+1)^0,f,c
  1721  001258  222E               	addwfc	(char2LCD@i+2)^0,f,c
  1722  00125A  222F               	addwfc	(char2LCD@i+3)^0,f,c
  1723  00125C  502F               	movf	(char2LCD@i+3)^0,w,c
  1724  00125E  102E               	iorwf	(char2LCD@i+2)^0,w,c
  1725  001260  E10B               	bnz	u1670
  1726  001262  0EE8               	movlw	232
  1727  001264  5C2C               	subwf	char2LCD@i^0,w,c
  1728  001266  0E03               	movlw	3
  1729  001268  582D               	subwfb	(char2LCD@i+1)^0,w,c
  1730  00126A  A0D8               	btfss	status,0,c
  1731  00126C  EF3A  F009         	goto	u1671
  1732  001270  EF3C  F009         	goto	u1670
  1733  001274                     u1671:
  1734  001274  EF28  F009         	goto	l2646
  1735  001278                     u1670:
  1736  001278  0012               	return		;funcret
  1737  00127A                     __end_of_char2LCD:
  1738                           	callstack 0
  1739                           
  1740 ;; *************** function _write_DATA *****************
  1741 ;; Defined at:
  1742 ;;		line 114 in file "lcd.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;  dato            1    wreg     unsigned char 
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;  dato            1    1[COMRAM] unsigned char 
  1747 ;; Return value:  Size  Location     Type
  1748 ;;                  1    wreg      void 
  1749 ;; Registers used:
  1750 ;;		wreg, status,2, status,0, cstack
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1756 ;;      Params:         0       0       0       0       0       0       0       0       0
  1757 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1758 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1759 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1760 ;;Total ram usage:        1 bytes
  1761 ;; Hardware stack levels used: 1
  1762 ;; Hardware stack levels required when called: 3
  1763 ;; This function calls:
  1764 ;;		_write_LCD
  1765 ;; This function is called by:
  1766 ;;		_msg2LCD
  1767 ;;		_char2LCD
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           	psect	text7
  1772  001392                     __ptext7:
  1773                           	callstack 0
  1774  001392                     _write_DATA:
  1775                           	callstack 26
  1776                           
  1777                           ;incstack = 0
  1778                           ;write_DATA@dato stored from wreg
  1779  001392  6E2A               	movwf	write_DATA@dato^0,c
  1780  001394                     
  1781                           ;lcd.c: 116:  PORTEbits.RE1 = 0x1;
  1782  001394  8284               	bsf	132,1,c	;volatile
  1783                           
  1784                           ;lcd.c: 117:  PORTAbits.RA5 = 0x0;
  1785  001396  9A80               	bcf	128,5,c	;volatile
  1786  001398                     
  1787                           ;lcd.c: 118:  write_LCD(dato);
  1788  001398  502A               	movf	write_DATA@dato^0,w,c
  1789  00139A  EC8E  F009         	call	_write_LCD
  1790  00139E  0012               	return		;funcret
  1791  0013A0                     __end_of_write_DATA:
  1792                           	callstack 0
  1793                           
  1794 ;; *************** function ___awmod *****************
  1795 ;; Defined at:
  1796 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;  dividend        2    0[COMRAM] int 
  1799 ;;  divisor         2    2[COMRAM] int 
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;  sign            1    5[COMRAM] unsigned char 
  1802 ;;  counter         1    4[COMRAM] unsigned char 
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  2    0[COMRAM] int 
  1805 ;; Registers used:
  1806 ;;		wreg, status,2, status,0
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1812 ;;      Params:         4       0       0       0       0       0       0       0       0
  1813 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1814 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1815 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1816 ;;Total ram usage:        6 bytes
  1817 ;; Hardware stack levels used: 1
  1818 ;; Hardware stack levels required when called: 2
  1819 ;; This function calls:
  1820 ;;		Nothing
  1821 ;; This function is called by:
  1822 ;;		_main
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           	psect	text8
  1827  001074                     __ptext8:
  1828                           	callstack 0
  1829  001074                     ___awmod:
  1830                           	callstack 28
  1831  001074  0E00               	movlw	0
  1832  001076  6E2E               	movwf	___awmod@sign^0,c
  1833  001078  BE2A               	btfsc	(___awmod@dividend+1)^0,7,c
  1834  00107A  EF43  F008         	goto	u1890
  1835  00107E  EF41  F008         	goto	u1891
  1836  001082                     u1891:
  1837  001082  EF49  F008         	goto	l2764
  1838  001086                     u1890:
  1839  001086  6C29               	negf	___awmod@dividend^0,c
  1840  001088  1E2A               	comf	(___awmod@dividend+1)^0,f,c
  1841  00108A  B0D8               	btfsc	status,0,c
  1842  00108C  2A2A               	incf	(___awmod@dividend+1)^0,f,c
  1843  00108E  0E01               	movlw	1
  1844  001090  6E2E               	movwf	___awmod@sign^0,c
  1845  001092                     l2764:
  1846  001092  BE2C               	btfsc	(___awmod@divisor+1)^0,7,c
  1847  001094  EF50  F008         	goto	u1900
  1848  001098  EF4E  F008         	goto	u1901
  1849  00109C                     u1901:
  1850  00109C  EF54  F008         	goto	l2768
  1851  0010A0                     u1900:
  1852  0010A0  6C2B               	negf	___awmod@divisor^0,c
  1853  0010A2  1E2C               	comf	(___awmod@divisor+1)^0,f,c
  1854  0010A4  B0D8               	btfsc	status,0,c
  1855  0010A6  2A2C               	incf	(___awmod@divisor+1)^0,f,c
  1856  0010A8                     l2768:
  1857  0010A8  502B               	movf	___awmod@divisor^0,w,c
  1858  0010AA  102C               	iorwf	(___awmod@divisor+1)^0,w,c
  1859  0010AC  B4D8               	btfsc	status,2,c
  1860  0010AE  EF5B  F008         	goto	u1911
  1861  0010B2  EF5D  F008         	goto	u1910
  1862  0010B6                     u1911:
  1863  0010B6  EF81  F008         	goto	l2784
  1864  0010BA                     u1910:
  1865  0010BA  0E01               	movlw	1
  1866  0010BC  6E2D               	movwf	___awmod@counter^0,c
  1867  0010BE  EF65  F008         	goto	l2774
  1868  0010C2                     l2772:
  1869  0010C2  90D8               	bcf	status,0,c
  1870  0010C4  362B               	rlcf	___awmod@divisor^0,f,c
  1871  0010C6  362C               	rlcf	(___awmod@divisor+1)^0,f,c
  1872  0010C8  2A2D               	incf	___awmod@counter^0,f,c
  1873  0010CA                     l2774:
  1874  0010CA  AE2C               	btfss	(___awmod@divisor+1)^0,7,c
  1875  0010CC  EF6A  F008         	goto	u1921
  1876  0010D0  EF6C  F008         	goto	u1920
  1877  0010D4                     u1921:
  1878  0010D4  EF61  F008         	goto	l2772
  1879  0010D8                     u1920:
  1880  0010D8                     l2776:
  1881  0010D8  502B               	movf	___awmod@divisor^0,w,c
  1882  0010DA  5C29               	subwf	___awmod@dividend^0,w,c
  1883  0010DC  502C               	movf	(___awmod@divisor+1)^0,w,c
  1884  0010DE  582A               	subwfb	(___awmod@dividend+1)^0,w,c
  1885  0010E0  A0D8               	btfss	status,0,c
  1886  0010E2  EF75  F008         	goto	u1931
  1887  0010E6  EF77  F008         	goto	u1930
  1888  0010EA                     u1931:
  1889  0010EA  EF7B  F008         	goto	l2780
  1890  0010EE                     u1930:
  1891  0010EE  502B               	movf	___awmod@divisor^0,w,c
  1892  0010F0  5E29               	subwf	___awmod@dividend^0,f,c
  1893  0010F2  502C               	movf	(___awmod@divisor+1)^0,w,c
  1894  0010F4  5A2A               	subwfb	(___awmod@dividend+1)^0,f,c
  1895  0010F6                     l2780:
  1896  0010F6  90D8               	bcf	status,0,c
  1897  0010F8  322C               	rrcf	(___awmod@divisor+1)^0,f,c
  1898  0010FA  322B               	rrcf	___awmod@divisor^0,f,c
  1899  0010FC  2E2D               	decfsz	___awmod@counter^0,f,c
  1900  0010FE  EF6C  F008         	goto	l2776
  1901  001102                     l2784:
  1902  001102  502E               	movf	___awmod@sign^0,w,c
  1903  001104  B4D8               	btfsc	status,2,c
  1904  001106  EF87  F008         	goto	u1941
  1905  00110A  EF89  F008         	goto	u1940
  1906  00110E                     u1941:
  1907  00110E  EF8D  F008         	goto	l2788
  1908  001112                     u1940:
  1909  001112  6C29               	negf	___awmod@dividend^0,c
  1910  001114  1E2A               	comf	(___awmod@dividend+1)^0,f,c
  1911  001116  B0D8               	btfsc	status,0,c
  1912  001118  2A2A               	incf	(___awmod@dividend+1)^0,f,c
  1913  00111A                     l2788:
  1914  00111A  C029  F029         	movff	___awmod@dividend,?___awmod
  1915  00111E  C02A  F02A         	movff	___awmod@dividend+1,?___awmod+1
  1916  001122  0012               	return		;funcret
  1917  001124                     __end_of___awmod:
  1918                           	callstack 0
  1919                           
  1920 ;; *************** function ___awdiv *****************
  1921 ;; Defined at:
  1922 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;  dividend        2    6[COMRAM] int 
  1925 ;;  divisor         2    8[COMRAM] int 
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;  quotient        2   12[COMRAM] int 
  1928 ;;  sign            1   11[COMRAM] unsigned char 
  1929 ;;  counter         1   10[COMRAM] unsigned char 
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  2    6[COMRAM] int 
  1932 ;; Registers used:
  1933 ;;		wreg, status,2, status,0
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1939 ;;      Params:         4       0       0       0       0       0       0       0       0
  1940 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1941 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1942 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1943 ;;Total ram usage:        8 bytes
  1944 ;; Hardware stack levels used: 1
  1945 ;; Hardware stack levels required when called: 2
  1946 ;; This function calls:
  1947 ;;		Nothing
  1948 ;; This function is called by:
  1949 ;;		_main
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           	psect	text9
  1954  000FB0                     __ptext9:
  1955                           	callstack 0
  1956  000FB0                     ___awdiv:
  1957                           	callstack 28
  1958  000FB0  0E00               	movlw	0
  1959  000FB2  6E34               	movwf	___awdiv@sign^0,c
  1960  000FB4  BE32               	btfsc	(___awdiv@divisor+1)^0,7,c
  1961  000FB6  EFE1  F007         	goto	u1830
  1962  000FBA  EFDF  F007         	goto	u1831
  1963  000FBE                     u1831:
  1964  000FBE  EFE7  F007         	goto	l2720
  1965  000FC2                     u1830:
  1966  000FC2  6C31               	negf	___awdiv@divisor^0,c
  1967  000FC4  1E32               	comf	(___awdiv@divisor+1)^0,f,c
  1968  000FC6  B0D8               	btfsc	status,0,c
  1969  000FC8  2A32               	incf	(___awdiv@divisor+1)^0,f,c
  1970  000FCA  0E01               	movlw	1
  1971  000FCC  6E34               	movwf	___awdiv@sign^0,c
  1972  000FCE                     l2720:
  1973  000FCE  BE30               	btfsc	(___awdiv@dividend+1)^0,7,c
  1974  000FD0  EFEE  F007         	goto	u1840
  1975  000FD4  EFEC  F007         	goto	u1841
  1976  000FD8                     u1841:
  1977  000FD8  EFF4  F007         	goto	l2726
  1978  000FDC                     u1840:
  1979  000FDC  6C2F               	negf	___awdiv@dividend^0,c
  1980  000FDE  1E30               	comf	(___awdiv@dividend+1)^0,f,c
  1981  000FE0  B0D8               	btfsc	status,0,c
  1982  000FE2  2A30               	incf	(___awdiv@dividend+1)^0,f,c
  1983  000FE4  0E01               	movlw	1
  1984  000FE6  1A34               	xorwf	___awdiv@sign^0,f,c
  1985  000FE8                     l2726:
  1986  000FE8  0E00               	movlw	0
  1987  000FEA  6E36               	movwf	(___awdiv@quotient+1)^0,c
  1988  000FEC  0E00               	movlw	0
  1989  000FEE  6E35               	movwf	___awdiv@quotient^0,c
  1990  000FF0  5031               	movf	___awdiv@divisor^0,w,c
  1991  000FF2  1032               	iorwf	(___awdiv@divisor+1)^0,w,c
  1992  000FF4  B4D8               	btfsc	status,2,c
  1993  000FF6  EFFF  F007         	goto	u1851
  1994  000FFA  EF01  F008         	goto	u1850
  1995  000FFE                     u1851:
  1996  000FFE  EF29  F008         	goto	l2748
  1997  001002                     u1850:
  1998  001002  0E01               	movlw	1
  1999  001004  6E33               	movwf	___awdiv@counter^0,c
  2000  001006  EF09  F008         	goto	l2734
  2001  00100A                     l2732:
  2002  00100A  90D8               	bcf	status,0,c
  2003  00100C  3631               	rlcf	___awdiv@divisor^0,f,c
  2004  00100E  3632               	rlcf	(___awdiv@divisor+1)^0,f,c
  2005  001010  2A33               	incf	___awdiv@counter^0,f,c
  2006  001012                     l2734:
  2007  001012  AE32               	btfss	(___awdiv@divisor+1)^0,7,c
  2008  001014  EF0E  F008         	goto	u1861
  2009  001018  EF10  F008         	goto	u1860
  2010  00101C                     u1861:
  2011  00101C  EF05  F008         	goto	l2732
  2012  001020                     u1860:
  2013  001020                     l2736:
  2014  001020  90D8               	bcf	status,0,c
  2015  001022  3635               	rlcf	___awdiv@quotient^0,f,c
  2016  001024  3636               	rlcf	(___awdiv@quotient+1)^0,f,c
  2017  001026  5031               	movf	___awdiv@divisor^0,w,c
  2018  001028  5C2F               	subwf	___awdiv@dividend^0,w,c
  2019  00102A  5032               	movf	(___awdiv@divisor+1)^0,w,c
  2020  00102C  5830               	subwfb	(___awdiv@dividend+1)^0,w,c
  2021  00102E  A0D8               	btfss	status,0,c
  2022  001030  EF1C  F008         	goto	u1871
  2023  001034  EF1E  F008         	goto	u1870
  2024  001038                     u1871:
  2025  001038  EF23  F008         	goto	l2744
  2026  00103C                     u1870:
  2027  00103C  5031               	movf	___awdiv@divisor^0,w,c
  2028  00103E  5E2F               	subwf	___awdiv@dividend^0,f,c
  2029  001040  5032               	movf	(___awdiv@divisor+1)^0,w,c
  2030  001042  5A30               	subwfb	(___awdiv@dividend+1)^0,f,c
  2031  001044  8035               	bsf	___awdiv@quotient^0,0,c
  2032  001046                     l2744:
  2033  001046  90D8               	bcf	status,0,c
  2034  001048  3232               	rrcf	(___awdiv@divisor+1)^0,f,c
  2035  00104A  3231               	rrcf	___awdiv@divisor^0,f,c
  2036  00104C  2E33               	decfsz	___awdiv@counter^0,f,c
  2037  00104E  EF10  F008         	goto	l2736
  2038  001052                     l2748:
  2039  001052  5034               	movf	___awdiv@sign^0,w,c
  2040  001054  B4D8               	btfsc	status,2,c
  2041  001056  EF2F  F008         	goto	u1881
  2042  00105A  EF31  F008         	goto	u1880
  2043  00105E                     u1881:
  2044  00105E  EF35  F008         	goto	l2752
  2045  001062                     u1880:
  2046  001062  6C35               	negf	___awdiv@quotient^0,c
  2047  001064  1E36               	comf	(___awdiv@quotient+1)^0,f,c
  2048  001066  B0D8               	btfsc	status,0,c
  2049  001068  2A36               	incf	(___awdiv@quotient+1)^0,f,c
  2050  00106A                     l2752:
  2051  00106A  C035  F02F         	movff	___awdiv@quotient,?___awdiv
  2052  00106E  C036  F030         	movff	___awdiv@quotient+1,?___awdiv+1
  2053  001072  0012               	return		;funcret
  2054  001074                     __end_of___awdiv:
  2055                           	callstack 0
  2056                           
  2057 ;; *************** function _TIMER0_INI *****************
  2058 ;; Defined at:
  2059 ;;		line 14 in file "Tecnica1.c"
  2060 ;; Parameters:    Size  Location     Type
  2061 ;;		None
  2062 ;; Auto vars:     Size  Location     Type
  2063 ;;		None
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  1    wreg      void 
  2066 ;; Registers used:
  2067 ;;		wreg, status,2
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2073 ;;      Params:         0       0       0       0       0       0       0       0       0
  2074 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2075 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2076 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2077 ;;Total ram usage:        0 bytes
  2078 ;; Hardware stack levels used: 1
  2079 ;; Hardware stack levels required when called: 2
  2080 ;; This function calls:
  2081 ;;		Nothing
  2082 ;; This function is called by:
  2083 ;;		_main
  2084 ;; This function uses a non-reentrant model
  2085 ;;
  2086                           
  2087                           	psect	text10
  2088  00133C                     __ptext10:
  2089                           	callstack 0
  2090  00133C                     _TIMER0_INI:
  2091                           	callstack 28
  2092  00133C                     
  2093                           ;Tecnica1.c: 15:     T0CONbits.TMR0ON = 0;
  2094  00133C  9ED5               	bcf	213,7,c	;volatile
  2095                           
  2096                           ;Tecnica1.c: 16:     T0CONbits.T08BIT = 1;
  2097  00133E  8CD5               	bsf	213,6,c	;volatile
  2098                           
  2099                           ;Tecnica1.c: 17:     T0CONbits.T0CS = 0;
  2100  001340  9AD5               	bcf	213,5,c	;volatile
  2101                           
  2102                           ;Tecnica1.c: 18:     T0CONbits.PSA = 0;
  2103  001342  96D5               	bcf	213,3,c	;volatile
  2104                           
  2105                           ;Tecnica1.c: 19:     T0CONbits.T0PS0 = 1;
  2106  001344  80D5               	bsf	213,0,c	;volatile
  2107                           
  2108                           ;Tecnica1.c: 20:     T0CONbits.T0PS1 = 1;
  2109  001346  82D5               	bsf	213,1,c	;volatile
  2110                           
  2111                           ;Tecnica1.c: 21:     T0CONbits.T0PS2 = 1;
  2112  001348  84D5               	bsf	213,2,c	;volatile
  2113  00134A                     
  2114                           ;Tecnica1.c: 22:     TMR0L = 209;
  2115  00134A  0ED1               	movlw	209
  2116  00134C  6ED6               	movwf	214,c	;volatile
  2117  00134E                     
  2118                           ;Tecnica1.c: 23:     TMR0H = 0xFF;
  2119  00134E  68D7               	setf	215,c	;volatile
  2120  001350                     
  2121                           ;Tecnica1.c: 24:     INTCONbits.TMR0IE = 1;
  2122  001350  8AF2               	bsf	242,5,c	;volatile
  2123  001352  0012               	return		;funcret
  2124  001354                     __end_of_TIMER0_INI:
  2125                           	callstack 0
  2126                           
  2127 ;; *************** function _PicIni13 *****************
  2128 ;; Defined at:
  2129 ;;		line 3 in file "ConfShield1_3.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;		None
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;		None
  2134 ;; Return value:  Size  Location     Type
  2135 ;;                  1    wreg      void 
  2136 ;; Registers used:
  2137 ;;		wreg, status,2
  2138 ;; Tracked objects:
  2139 ;;		On entry : 0/0
  2140 ;;		On exit  : 0/0
  2141 ;;		Unchanged: 0/0
  2142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2143 ;;      Params:         0       0       0       0       0       0       0       0       0
  2144 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2145 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2146 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2147 ;;Total ram usage:        0 bytes
  2148 ;; Hardware stack levels used: 1
  2149 ;; Hardware stack levels required when called: 2
  2150 ;; This function calls:
  2151 ;;		Nothing
  2152 ;; This function is called by:
  2153 ;;		_main
  2154 ;; This function uses a non-reentrant model
  2155 ;;
  2156                           
  2157                           	psect	text11
  2158  0012EA                     __ptext11:
  2159                           	callstack 0
  2160  0012EA                     _PicIni13:
  2161                           	callstack 28
  2162  0012EA                     
  2163                           ;ConfShield1_3.c: 6:     LATA = 0x00;
  2164  0012EA  0E00               	movlw	0
  2165  0012EC  6E89               	movwf	137,c	;volatile
  2166                           
  2167                           ;ConfShield1_3.c: 7:     LATB = 0x00;
  2168  0012EE  0E00               	movlw	0
  2169  0012F0  6E8A               	movwf	138,c	;volatile
  2170                           
  2171                           ;ConfShield1_3.c: 8:     LATC = 0x00;
  2172  0012F2  0E00               	movlw	0
  2173  0012F4  6E8B               	movwf	139,c	;volatile
  2174                           
  2175                           ;ConfShield1_3.c: 9:     LATD = 0x00;
  2176  0012F6  0E00               	movlw	0
  2177  0012F8  6E8C               	movwf	140,c	;volatile
  2178                           
  2179                           ;ConfShield1_3.c: 10:     LATE = 0x00;
  2180  0012FA  0E00               	movlw	0
  2181  0012FC  6E8D               	movwf	141,c	;volatile
  2182                           
  2183                           ;ConfShield1_3.c: 14:     TRISD = 0xF0;
  2184  0012FE  0EF0               	movlw	240
  2185  001300  6E95               	movwf	149,c	;volatile
  2186                           
  2187                           ;ConfShield1_3.c: 19:     CMCON = 0x07;
  2188  001302  0E07               	movlw	7
  2189  001304  6EB4               	movwf	180,c	;volatile
  2190                           
  2191                           ;ConfShield1_3.c: 20:     ADCON1 = 0x0F;
  2192  001306  0E0F               	movlw	15
  2193  001308  6EC1               	movwf	193,c	;volatile
  2194                           
  2195                           ;ConfShield1_3.c: 21:     TRISA = 0xC0;
  2196  00130A  0EC0               	movlw	192
  2197  00130C  6E92               	movwf	146,c	;volatile
  2198                           
  2199                           ;ConfShield1_3.c: 22:     TRISE = 0x00;
  2200  00130E  0E00               	movlw	0
  2201  001310  6E96               	movwf	150,c	;volatile
  2202                           
  2203                           ;ConfShield1_3.c: 26:     TRISB = 0b11110000;
  2204  001312  0EF0               	movlw	240
  2205  001314  6E93               	movwf	147,c	;volatile
  2206  001316                     
  2207                           ;ConfShield1_3.c: 28:     TRISCbits.RC7 = 1;
  2208  001316  8E94               	bsf	148,7,c	;volatile
  2209  001318                     
  2210                           ;ConfShield1_3.c: 29:     TRISCbits.RC6 = 1;
  2211  001318  8C94               	bsf	148,6,c	;volatile
  2212  00131A  0012               	return		;funcret
  2213  00131C                     __end_of_PicIni13:
  2214                           	callstack 0
  2215                           
  2216 ;; *************** function _LCD_init *****************
  2217 ;; Defined at:
  2218 ;;		line 74 in file "lcd.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;		None
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;  i               4   22[COMRAM] unsigned long 
  2223 ;;  i               4   18[COMRAM] unsigned long 
  2224 ;;  i               4   14[COMRAM] unsigned long 
  2225 ;;  i               4   10[COMRAM] unsigned long 
  2226 ;;  i               4    6[COMRAM] unsigned long 
  2227 ;;  i               4    2[COMRAM] unsigned long 
  2228 ;; Return value:  Size  Location     Type
  2229 ;;                  1    wreg      void 
  2230 ;; Registers used:
  2231 ;;		wreg, status,2, status,0, cstack
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2237 ;;      Params:         0       0       0       0       0       0       0       0       0
  2238 ;;      Locals:        24       0       0       0       0       0       0       0       0
  2239 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2240 ;;      Totals:        24       0       0       0       0       0       0       0       0
  2241 ;;Total ram usage:       24 bytes
  2242 ;; Hardware stack levels used: 1
  2243 ;; Hardware stack levels required when called: 4
  2244 ;; This function calls:
  2245 ;;		_write_CMD
  2246 ;; This function is called by:
  2247 ;;		_main
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text12
  2252  000C94                     __ptext12:
  2253                           	callstack 0
  2254  000C94                     _LCD_init:
  2255                           	callstack 26
  2256  000C94                     
  2257                           ;lcd.c: 75:     TRISD &= 0x0F;
  2258  000C94  0E0F               	movlw	15
  2259  000C96  1695               	andwf	149,f,c	;volatile
  2260  000C98                     
  2261                           ;lcd.c: 76:     TRISEbits.RE1 = 0;
  2262  000C98  9296               	bcf	150,1,c	;volatile
  2263  000C9A                     
  2264                           ;lcd.c: 77:     TRISAbits.RA5 = 0;
  2265  000C9A  9A92               	bcf	146,5,c	;volatile
  2266  000C9C                     
  2267                           ;lcd.c: 78:     TRISEbits.RE2 = 0;
  2268  000C9C  9496               	bcf	150,2,c	;volatile
  2269  000C9E                     
  2270                           ;lcd.c: 81:  LCD_tout = 30;
  2271  000C9E  0E00               	movlw	0
  2272  000CA0  6E52               	movwf	(_LCD_tout+1)^0,c
  2273  000CA2  0E1E               	movlw	30
  2274  000CA4  6E51               	movwf	_LCD_tout^0,c
  2275  000CA6                     
  2276                           ;lcd.c: 83:     for(unsigned long i=0; i<100000;i++);
  2277  000CA6  0E00               	movlw	0
  2278  000CA8  6E2B               	movwf	LCD_init@i^0,c
  2279  000CAA  0E00               	movlw	0
  2280  000CAC  6E2C               	movwf	(LCD_init@i+1)^0,c
  2281  000CAE  0E00               	movlw	0
  2282  000CB0  6E2D               	movwf	(LCD_init@i+2)^0,c
  2283  000CB2  0E00               	movlw	0
  2284  000CB4  6E2E               	movwf	(LCD_init@i+3)^0,c
  2285  000CB6                     l2448:
  2286  000CB6  0E01               	movlw	1
  2287  000CB8  262B               	addwf	LCD_init@i^0,f,c
  2288  000CBA  0E00               	movlw	0
  2289  000CBC  222C               	addwfc	(LCD_init@i+1)^0,f,c
  2290  000CBE  222D               	addwfc	(LCD_init@i+2)^0,f,c
  2291  000CC0  222E               	addwfc	(LCD_init@i+3)^0,f,c
  2292  000CC2  502E               	movf	(LCD_init@i+3)^0,w,c
  2293  000CC4  E10D               	bnz	u1330
  2294  000CC6  0EA0               	movlw	160
  2295  000CC8  5C2B               	subwf	LCD_init@i^0,w,c
  2296  000CCA  0E86               	movlw	134
  2297  000CCC  582C               	subwfb	(LCD_init@i+1)^0,w,c
  2298  000CCE  0E01               	movlw	1
  2299  000CD0  582D               	subwfb	(LCD_init@i+2)^0,w,c
  2300  000CD2  A0D8               	btfss	status,0,c
  2301  000CD4  EF6E  F006         	goto	u1331
  2302  000CD8  EF70  F006         	goto	u1330
  2303  000CDC                     u1331:
  2304  000CDC  EF5B  F006         	goto	l2448
  2305  000CE0                     u1330:
  2306  000CE0                     
  2307                           ;lcd.c: 85:  write_CMD(0x02);
  2308  000CE0  0E02               	movlw	2
  2309  000CE2  ECD0  F009         	call	_write_CMD
  2310  000CE6                     
  2311                           ;lcd.c: 86:  LCD_tout = 1;
  2312  000CE6  0E00               	movlw	0
  2313  000CE8  6E52               	movwf	(_LCD_tout+1)^0,c
  2314  000CEA  0E01               	movlw	1
  2315  000CEC  6E51               	movwf	_LCD_tout^0,c
  2316  000CEE                     
  2317                           ;lcd.c: 88:     for(unsigned long i=0; i<100000;i++);
  2318  000CEE  0E00               	movlw	0
  2319  000CF0  6E2F               	movwf	LCD_init@i_1842^0,c
  2320  000CF2  0E00               	movlw	0
  2321  000CF4  6E30               	movwf	(LCD_init@i_1842+1)^0,c
  2322  000CF6  0E00               	movlw	0
  2323  000CF8  6E31               	movwf	(LCD_init@i_1842+2)^0,c
  2324  000CFA  0E00               	movlw	0
  2325  000CFC  6E32               	movwf	(LCD_init@i_1842+3)^0,c
  2326  000CFE                     l2460:
  2327  000CFE  0E01               	movlw	1
  2328  000D00  262F               	addwf	LCD_init@i_1842^0,f,c
  2329  000D02  0E00               	movlw	0
  2330  000D04  2230               	addwfc	(LCD_init@i_1842+1)^0,f,c
  2331  000D06  2231               	addwfc	(LCD_init@i_1842+2)^0,f,c
  2332  000D08  2232               	addwfc	(LCD_init@i_1842+3)^0,f,c
  2333  000D0A  5032               	movf	(LCD_init@i_1842+3)^0,w,c
  2334  000D0C  E10D               	bnz	u1340
  2335  000D0E  0EA0               	movlw	160
  2336  000D10  5C2F               	subwf	LCD_init@i_1842^0,w,c
  2337  000D12  0E86               	movlw	134
  2338  000D14  5830               	subwfb	(LCD_init@i_1842+1)^0,w,c
  2339  000D16  0E01               	movlw	1
  2340  000D18  5831               	subwfb	(LCD_init@i_1842+2)^0,w,c
  2341  000D1A  A0D8               	btfss	status,0,c
  2342  000D1C  EF92  F006         	goto	u1341
  2343  000D20  EF94  F006         	goto	u1340
  2344  000D24                     u1341:
  2345  000D24  EF7F  F006         	goto	l2460
  2346  000D28                     u1340:
  2347  000D28                     
  2348                           ;lcd.c: 90:  write_CMD(0x28);
  2349  000D28  0E28               	movlw	40
  2350  000D2A  ECD0  F009         	call	_write_CMD
  2351  000D2E                     
  2352                           ;lcd.c: 91:  LCD_tout = 1;
  2353  000D2E  0E00               	movlw	0
  2354  000D30  6E52               	movwf	(_LCD_tout+1)^0,c
  2355  000D32  0E01               	movlw	1
  2356  000D34  6E51               	movwf	_LCD_tout^0,c
  2357  000D36                     
  2358                           ;lcd.c: 93:     for(unsigned long i=0; i<100000;i++);
  2359  000D36  0E00               	movlw	0
  2360  000D38  6E33               	movwf	LCD_init@i_1843^0,c
  2361  000D3A  0E00               	movlw	0
  2362  000D3C  6E34               	movwf	(LCD_init@i_1843+1)^0,c
  2363  000D3E  0E00               	movlw	0
  2364  000D40  6E35               	movwf	(LCD_init@i_1843+2)^0,c
  2365  000D42  0E00               	movlw	0
  2366  000D44  6E36               	movwf	(LCD_init@i_1843+3)^0,c
  2367  000D46                     l2472:
  2368  000D46  0E01               	movlw	1
  2369  000D48  2633               	addwf	LCD_init@i_1843^0,f,c
  2370  000D4A  0E00               	movlw	0
  2371  000D4C  2234               	addwfc	(LCD_init@i_1843+1)^0,f,c
  2372  000D4E  2235               	addwfc	(LCD_init@i_1843+2)^0,f,c
  2373  000D50  2236               	addwfc	(LCD_init@i_1843+3)^0,f,c
  2374  000D52  5036               	movf	(LCD_init@i_1843+3)^0,w,c
  2375  000D54  E10D               	bnz	u1350
  2376  000D56  0EA0               	movlw	160
  2377  000D58  5C33               	subwf	LCD_init@i_1843^0,w,c
  2378  000D5A  0E86               	movlw	134
  2379  000D5C  5834               	subwfb	(LCD_init@i_1843+1)^0,w,c
  2380  000D5E  0E01               	movlw	1
  2381  000D60  5835               	subwfb	(LCD_init@i_1843+2)^0,w,c
  2382  000D62  A0D8               	btfss	status,0,c
  2383  000D64  EFB6  F006         	goto	u1351
  2384  000D68  EFB8  F006         	goto	u1350
  2385  000D6C                     u1351:
  2386  000D6C  EFA3  F006         	goto	l2472
  2387  000D70                     u1350:
  2388  000D70                     
  2389                           ;lcd.c: 95:  write_CMD(0x0C);
  2390  000D70  0E0C               	movlw	12
  2391  000D72  ECD0  F009         	call	_write_CMD
  2392  000D76                     
  2393                           ;lcd.c: 96:  LCD_tout = 1;
  2394  000D76  0E00               	movlw	0
  2395  000D78  6E52               	movwf	(_LCD_tout+1)^0,c
  2396  000D7A  0E01               	movlw	1
  2397  000D7C  6E51               	movwf	_LCD_tout^0,c
  2398  000D7E                     
  2399                           ;lcd.c: 98:     for(unsigned long i=0; i<100000;i++);
  2400  000D7E  0E00               	movlw	0
  2401  000D80  6E37               	movwf	LCD_init@i_1844^0,c
  2402  000D82  0E00               	movlw	0
  2403  000D84  6E38               	movwf	(LCD_init@i_1844+1)^0,c
  2404  000D86  0E00               	movlw	0
  2405  000D88  6E39               	movwf	(LCD_init@i_1844+2)^0,c
  2406  000D8A  0E00               	movlw	0
  2407  000D8C  6E3A               	movwf	(LCD_init@i_1844+3)^0,c
  2408  000D8E                     l2484:
  2409  000D8E  0E01               	movlw	1
  2410  000D90  2637               	addwf	LCD_init@i_1844^0,f,c
  2411  000D92  0E00               	movlw	0
  2412  000D94  2238               	addwfc	(LCD_init@i_1844+1)^0,f,c
  2413  000D96  2239               	addwfc	(LCD_init@i_1844+2)^0,f,c
  2414  000D98  223A               	addwfc	(LCD_init@i_1844+3)^0,f,c
  2415  000D9A  503A               	movf	(LCD_init@i_1844+3)^0,w,c
  2416  000D9C  E10D               	bnz	u1360
  2417  000D9E  0EA0               	movlw	160
  2418  000DA0  5C37               	subwf	LCD_init@i_1844^0,w,c
  2419  000DA2  0E86               	movlw	134
  2420  000DA4  5838               	subwfb	(LCD_init@i_1844+1)^0,w,c
  2421  000DA6  0E01               	movlw	1
  2422  000DA8  5839               	subwfb	(LCD_init@i_1844+2)^0,w,c
  2423  000DAA  A0D8               	btfss	status,0,c
  2424  000DAC  EFDA  F006         	goto	u1361
  2425  000DB0  EFDC  F006         	goto	u1360
  2426  000DB4                     u1361:
  2427  000DB4  EFC7  F006         	goto	l2484
  2428  000DB8                     u1360:
  2429  000DB8                     
  2430                           ;lcd.c: 100:  write_CMD(0x01);
  2431  000DB8  0E01               	movlw	1
  2432  000DBA  ECD0  F009         	call	_write_CMD
  2433  000DBE                     
  2434                           ;lcd.c: 101:  LCD_tout = 1;
  2435  000DBE  0E00               	movlw	0
  2436  000DC0  6E52               	movwf	(_LCD_tout+1)^0,c
  2437  000DC2  0E01               	movlw	1
  2438  000DC4  6E51               	movwf	_LCD_tout^0,c
  2439  000DC6                     
  2440                           ;lcd.c: 103:     for(unsigned long i=0; i<100000;i++);
  2441  000DC6  0E00               	movlw	0
  2442  000DC8  6E3B               	movwf	LCD_init@i_1845^0,c
  2443  000DCA  0E00               	movlw	0
  2444  000DCC  6E3C               	movwf	(LCD_init@i_1845+1)^0,c
  2445  000DCE  0E00               	movlw	0
  2446  000DD0  6E3D               	movwf	(LCD_init@i_1845+2)^0,c
  2447  000DD2  0E00               	movlw	0
  2448  000DD4  6E3E               	movwf	(LCD_init@i_1845+3)^0,c
  2449  000DD6                     l2496:
  2450  000DD6  0E01               	movlw	1
  2451  000DD8  263B               	addwf	LCD_init@i_1845^0,f,c
  2452  000DDA  0E00               	movlw	0
  2453  000DDC  223C               	addwfc	(LCD_init@i_1845+1)^0,f,c
  2454  000DDE  223D               	addwfc	(LCD_init@i_1845+2)^0,f,c
  2455  000DE0  223E               	addwfc	(LCD_init@i_1845+3)^0,f,c
  2456  000DE2  503E               	movf	(LCD_init@i_1845+3)^0,w,c
  2457  000DE4  E10D               	bnz	u1370
  2458  000DE6  0EA0               	movlw	160
  2459  000DE8  5C3B               	subwf	LCD_init@i_1845^0,w,c
  2460  000DEA  0E86               	movlw	134
  2461  000DEC  583C               	subwfb	(LCD_init@i_1845+1)^0,w,c
  2462  000DEE  0E01               	movlw	1
  2463  000DF0  583D               	subwfb	(LCD_init@i_1845+2)^0,w,c
  2464  000DF2  A0D8               	btfss	status,0,c
  2465  000DF4  EFFE  F006         	goto	u1371
  2466  000DF8  EF00  F007         	goto	u1370
  2467  000DFC                     u1371:
  2468  000DFC  EFEB  F006         	goto	l2496
  2469  000E00                     u1370:
  2470  000E00                     
  2471                           ;lcd.c: 105:  write_CMD(0x06);
  2472  000E00  0E06               	movlw	6
  2473  000E02  ECD0  F009         	call	_write_CMD
  2474  000E06                     
  2475                           ;lcd.c: 106:  LCD_tout = 1;
  2476  000E06  0E00               	movlw	0
  2477  000E08  6E52               	movwf	(_LCD_tout+1)^0,c
  2478  000E0A  0E01               	movlw	1
  2479  000E0C  6E51               	movwf	_LCD_tout^0,c
  2480  000E0E                     
  2481                           ;lcd.c: 108:     for(unsigned long i=0; i<100000;i++);
  2482  000E0E  0E00               	movlw	0
  2483  000E10  6E3F               	movwf	LCD_init@i_1846^0,c
  2484  000E12  0E00               	movlw	0
  2485  000E14  6E40               	movwf	(LCD_init@i_1846+1)^0,c
  2486  000E16  0E00               	movlw	0
  2487  000E18  6E41               	movwf	(LCD_init@i_1846+2)^0,c
  2488  000E1A  0E00               	movlw	0
  2489  000E1C  6E42               	movwf	(LCD_init@i_1846+3)^0,c
  2490  000E1E                     l2508:
  2491  000E1E  0E01               	movlw	1
  2492  000E20  263F               	addwf	LCD_init@i_1846^0,f,c
  2493  000E22  0E00               	movlw	0
  2494  000E24  2240               	addwfc	(LCD_init@i_1846+1)^0,f,c
  2495  000E26  2241               	addwfc	(LCD_init@i_1846+2)^0,f,c
  2496  000E28  2242               	addwfc	(LCD_init@i_1846+3)^0,f,c
  2497  000E2A  5042               	movf	(LCD_init@i_1846+3)^0,w,c
  2498  000E2C  E10D               	bnz	u1380
  2499  000E2E  0EA0               	movlw	160
  2500  000E30  5C3F               	subwf	LCD_init@i_1846^0,w,c
  2501  000E32  0E86               	movlw	134
  2502  000E34  5840               	subwfb	(LCD_init@i_1846+1)^0,w,c
  2503  000E36  0E01               	movlw	1
  2504  000E38  5841               	subwfb	(LCD_init@i_1846+2)^0,w,c
  2505  000E3A  A0D8               	btfss	status,0,c
  2506  000E3C  EF22  F007         	goto	u1381
  2507  000E40  EF24  F007         	goto	u1380
  2508  000E44                     u1381:
  2509  000E44  EF0F  F007         	goto	l2508
  2510  000E48                     u1380:
  2511  000E48  0012               	return		;funcret
  2512  000E4A                     __end_of_LCD_init:
  2513                           	callstack 0
  2514                           
  2515 ;; *************** function _write_CMD *****************
  2516 ;; Defined at:
  2517 ;;		line 123 in file "lcd.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;  dato            1    wreg     unsigned char 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  dato            1    1[COMRAM] unsigned char 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  1    wreg      void 
  2524 ;; Registers used:
  2525 ;;		wreg, status,2, status,0, cstack
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 0/0
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2531 ;;      Params:         0       0       0       0       0       0       0       0       0
  2532 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2533 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2534 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2535 ;;Total ram usage:        1 bytes
  2536 ;; Hardware stack levels used: 1
  2537 ;; Hardware stack levels required when called: 3
  2538 ;; This function calls:
  2539 ;;		_write_LCD
  2540 ;; This function is called by:
  2541 ;;		_set_CURSOR
  2542 ;;		_LCD_init
  2543 ;;		_clear_LCD
  2544 ;;		_ret_HOME
  2545 ;;		_DesplazarIzquierda
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           	psect	text13
  2550  0013A0                     __ptext13:
  2551                           	callstack 0
  2552  0013A0                     _write_CMD:
  2553                           	callstack 26
  2554                           
  2555                           ;incstack = 0
  2556                           ;write_CMD@dato stored from wreg
  2557  0013A0  6E2A               	movwf	write_CMD@dato^0,c
  2558  0013A2                     
  2559                           ;lcd.c: 125:  PORTEbits.RE1 = 0x0;
  2560  0013A2  9284               	bcf	132,1,c	;volatile
  2561                           
  2562                           ;lcd.c: 126:  PORTAbits.RA5 = 0x0;
  2563  0013A4  9A80               	bcf	128,5,c	;volatile
  2564  0013A6                     
  2565                           ;lcd.c: 127:  write_LCD(dato);
  2566  0013A6  502A               	movf	write_CMD@dato^0,w,c
  2567  0013A8  EC8E  F009         	call	_write_LCD
  2568  0013AC  0012               	return		;funcret
  2569  0013AE                     __end_of_write_CMD:
  2570                           	callstack 0
  2571                           
  2572 ;; *************** function _write_LCD *****************
  2573 ;; Defined at:
  2574 ;;		line 132 in file "lcd.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;  dato            1    wreg     unsigned char 
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;  dato            1    0[COMRAM] unsigned char 
  2579 ;; Return value:  Size  Location     Type
  2580 ;;                  1    wreg      void 
  2581 ;; Registers used:
  2582 ;;		wreg, status,2, status,0
  2583 ;; Tracked objects:
  2584 ;;		On entry : 0/0
  2585 ;;		On exit  : 0/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2588 ;;      Params:         0       0       0       0       0       0       0       0       0
  2589 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2590 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2591 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2592 ;;Total ram usage:        1 bytes
  2593 ;; Hardware stack levels used: 1
  2594 ;; Hardware stack levels required when called: 2
  2595 ;; This function calls:
  2596 ;;		Nothing
  2597 ;; This function is called by:
  2598 ;;		_write_DATA
  2599 ;;		_write_CMD
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text14
  2604  00131C                     __ptext14:
  2605                           	callstack 0
  2606  00131C                     _write_LCD:
  2607                           	callstack 26
  2608                           
  2609                           ;incstack = 0
  2610                           ;write_LCD@dato stored from wreg
  2611  00131C  6E29               	movwf	write_LCD@dato^0,c
  2612  00131E                     
  2613                           ;lcd.c: 134:     LATD &= 0x0F;
  2614  00131E  0E0F               	movlw	15
  2615  001320  168C               	andwf	140,f,c	;volatile
  2616  001322                     
  2617                           ;lcd.c: 135:     PORTEbits.RE2 = 0x1;
  2618  001322  8484               	bsf	132,2,c	;volatile
  2619                           
  2620                           ;lcd.c: 138:     LATD |= (dato & 0xF0);
  2621  001324  5029               	movf	write_LCD@dato^0,w,c
  2622  001326  0BF0               	andlw	240
  2623  001328  128C               	iorwf	140,f,c	;volatile
  2624  00132A                     
  2625                           ;lcd.c: 140:     PORTEbits.RE2 = 0x0;
  2626  00132A  9484               	bcf	132,2,c	;volatile
  2627                           
  2628                           ;lcd.c: 142:     LATD &= 0x0F;
  2629  00132C  0E0F               	movlw	15
  2630  00132E  168C               	andwf	140,f,c	;volatile
  2631  001330                     
  2632                           ;lcd.c: 143:     PORTEbits.RE2 = 0x1;
  2633  001330  8484               	bsf	132,2,c	;volatile
  2634                           
  2635                           ;lcd.c: 146:     LATD |= (dato<<4);
  2636  001332  3829               	swapf	write_LCD@dato^0,w,c	;volatile
  2637  001334  0BF0               	andlw	240
  2638  001336  128C               	iorwf	140,f,c	;volatile
  2639  001338                     
  2640                           ;lcd.c: 148:     PORTEbits.RE2 = 0x0;
  2641  001338  9484               	bcf	132,2,c	;volatile
  2642  00133A  0012               	return		;funcret
  2643  00133C                     __end_of_write_LCD:
  2644                           	callstack 0
  2645                           
  2646 ;; *************** function _Botones13 *****************
  2647 ;; Defined at:
  2648 ;;		line 163 in file "ConfShield1_3.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;		None
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;  Boton_Presio    1    2[COMRAM] unsigned char 
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  1    wreg      unsigned char 
  2655 ;; Registers used:
  2656 ;;		wreg, status,2, status,0
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2662 ;;      Params:         0       0       0       0       0       0       0       0       0
  2663 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2664 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2665 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2666 ;;Total ram usage:        3 bytes
  2667 ;; Hardware stack levels used: 1
  2668 ;; Hardware stack levels required when called: 2
  2669 ;; This function calls:
  2670 ;;		Nothing
  2671 ;; This function is called by:
  2672 ;;		_main
  2673 ;; This function uses a non-reentrant model
  2674 ;;
  2675                           
  2676                           	psect	text15
  2677  000E4A                     __ptext15:
  2678                           	callstack 0
  2679  000E4A                     _Botones13:
  2680                           	callstack 28
  2681  000E4A                     
  2682                           ;ConfShield1_3.c: 171:     unsigned char Boton_Presionado = 0;;
  2683  000E4A  0E00               	movlw	0
  2684  000E4C  6E2B               	movwf	Botones13@Boton_Presionado^0,c
  2685                           
  2686                           ;ConfShield1_3.c: 173:     static unsigned char Estado_BOT = BotonLibre;;ConfShield1_3.c
      +                          : 176:     switch (Estado_BOT) {
  2687  000E4E  EFB9  F007         	goto	l2686
  2688  000E52                     l183:
  2689                           
  2690                           ;ConfShield1_3.c: 178:             if (!PORTCbits.RC4 || !PORTCbits.RC5 || !PORTCbits.RC
      +                          6 || !PORTCbits.RC7) {
  2691  000E52  A882               	btfss	130,4,c	;volatile
  2692  000E54  EF2E  F007         	goto	u1681
  2693  000E58  EF30  F007         	goto	u1680
  2694  000E5C                     u1681:
  2695  000E5C  EF45  F007         	goto	l2656
  2696  000E60                     u1680:
  2697  000E60  AA82               	btfss	130,5,c	;volatile
  2698  000E62  EF35  F007         	goto	u1691
  2699  000E66  EF37  F007         	goto	u1690
  2700  000E6A                     u1691:
  2701  000E6A  EF45  F007         	goto	l2656
  2702  000E6E                     u1690:
  2703  000E6E  AC82               	btfss	130,6,c	;volatile
  2704  000E70  EF3C  F007         	goto	u1701
  2705  000E74  EF3E  F007         	goto	u1700
  2706  000E78                     u1701:
  2707  000E78  EF45  F007         	goto	l2656
  2708  000E7C                     u1700:
  2709  000E7C  BE82               	btfsc	130,7,c	;volatile
  2710  000E7E  EF43  F007         	goto	u1711
  2711  000E82  EF45  F007         	goto	u1710
  2712  000E86                     u1711:
  2713  000E86  EFD6  F007         	goto	l2688
  2714  000E8A                     u1710:
  2715  000E8A                     l2656:
  2716                           
  2717                           ;ConfShield1_3.c: 179:                 Estado_BOT = BotonEnEspera;
  2718  000E8A  0E01               	movlw	1
  2719  000E8C  6E1E               	movwf	Botones13@Estado_BOT^0,c
  2720                           
  2721                           ;ConfShield1_3.c: 180:                 bot_tout = 40;;
  2722  000E8E  0E28               	movlw	40
  2723  000E90  6E27               	movwf	_bot_tout^0,c
  2724  000E92  EFD6  F007         	goto	l2688
  2725  000E96                     l2658:
  2726                           
  2727                           ;ConfShield1_3.c: 184:             if (!bot_tout) Estado_BOT = BotonDetectado;
  2728  000E96  5027               	movf	_bot_tout^0,w,c
  2729  000E98  A4D8               	btfss	status,2,c
  2730  000E9A  EF51  F007         	goto	u1721
  2731  000E9E  EF53  F007         	goto	u1720
  2732  000EA2                     u1721:
  2733  000EA2  EFD6  F007         	goto	l2688
  2734  000EA6                     u1720:
  2735  000EA6  0E02               	movlw	2
  2736  000EA8  6E1E               	movwf	Botones13@Estado_BOT^0,c
  2737  000EAA  EFD6  F007         	goto	l2688
  2738  000EAE                     l190:
  2739                           
  2740                           ;ConfShield1_3.c: 187:             if (!PORTCbits.RC7)Boton_Presionado = 4;
  2741  000EAE  BE82               	btfsc	130,7,c	;volatile
  2742  000EB0  EF5C  F007         	goto	u1731
  2743  000EB4  EF5E  F007         	goto	u1730
  2744  000EB8                     u1731:
  2745  000EB8  EF62  F007         	goto	l191
  2746  000EBC                     u1730:
  2747  000EBC  0E04               	movlw	4
  2748  000EBE  6E2B               	movwf	Botones13@Boton_Presionado^0,c
  2749  000EC0  EF85  F007         	goto	l192
  2750  000EC4                     l191:
  2751  000EC4  BC82               	btfsc	130,6,c	;volatile
  2752  000EC6  EF67  F007         	goto	u1741
  2753  000ECA  EF69  F007         	goto	u1740
  2754  000ECE                     u1741:
  2755  000ECE  EF6D  F007         	goto	l193
  2756  000ED2                     u1740:
  2757  000ED2  0E03               	movlw	3
  2758  000ED4  6E2B               	movwf	Botones13@Boton_Presionado^0,c
  2759  000ED6  EF85  F007         	goto	l192
  2760  000EDA                     l193:
  2761  000EDA  BA82               	btfsc	130,5,c	;volatile
  2762  000EDC  EF72  F007         	goto	u1751
  2763  000EE0  EF74  F007         	goto	u1750
  2764  000EE4                     u1751:
  2765  000EE4  EF78  F007         	goto	l195
  2766  000EE8                     u1750:
  2767  000EE8  0E02               	movlw	2
  2768  000EEA  6E2B               	movwf	Botones13@Boton_Presionado^0,c
  2769  000EEC  EF85  F007         	goto	l192
  2770  000EF0                     l195:
  2771  000EF0  B882               	btfsc	130,4,c	;volatile
  2772  000EF2  EF7D  F007         	goto	u1761
  2773  000EF6  EF7F  F007         	goto	u1760
  2774  000EFA                     u1761:
  2775  000EFA  EF83  F007         	goto	l2670
  2776  000EFE                     u1760:
  2777  000EFE  0E01               	movlw	1
  2778  000F00  6E2B               	movwf	Botones13@Boton_Presionado^0,c
  2779  000F02  EF85  F007         	goto	l192
  2780  000F06                     l2670:
  2781  000F06  0E00               	movlw	0
  2782  000F08  6E2B               	movwf	Botones13@Boton_Presionado^0,c
  2783  000F0A                     l192:
  2784                           
  2785                           ;ConfShield1_3.c: 193:             bot_tout = 40;;
  2786  000F0A  0E28               	movlw	40
  2787  000F0C  6E27               	movwf	_bot_tout^0,c
  2788                           
  2789                           ;ConfShield1_3.c: 194:             Estado_BOT = BotonEsperaLiberarce;
  2790  000F0E  0E03               	movlw	3
  2791  000F10  6E1E               	movwf	Botones13@Estado_BOT^0,c
  2792                           
  2793                           ;ConfShield1_3.c: 196:             break;
  2794  000F12  EFD6  F007         	goto	l2688
  2795  000F16                     l199:
  2796                           
  2797                           ;ConfShield1_3.c: 198:             if (PORTCbits.RC4 && PORTCbits.RC5 && PORTCbits.RC6 &
      +                          & PORTCbits.RC7 && !bot_tout) Estado_BOT = BotonLibre;
  2798  000F16  A882               	btfss	130,4,c	;volatile
  2799  000F18  EF90  F007         	goto	u1771
  2800  000F1C  EF92  F007         	goto	u1770
  2801  000F20                     u1771:
  2802  000F20  EFD6  F007         	goto	l2688
  2803  000F24                     u1770:
  2804  000F24  AA82               	btfss	130,5,c	;volatile
  2805  000F26  EF97  F007         	goto	u1781
  2806  000F2A  EF99  F007         	goto	u1780
  2807  000F2E                     u1781:
  2808  000F2E  EFD6  F007         	goto	l2688
  2809  000F32                     u1780:
  2810  000F32  AC82               	btfss	130,6,c	;volatile
  2811  000F34  EF9E  F007         	goto	u1791
  2812  000F38  EFA0  F007         	goto	u1790
  2813  000F3C                     u1791:
  2814  000F3C  EFD6  F007         	goto	l2688
  2815  000F40                     u1790:
  2816  000F40  AE82               	btfss	130,7,c	;volatile
  2817  000F42  EFA5  F007         	goto	u1801
  2818  000F46  EFA7  F007         	goto	u1800
  2819  000F4A                     u1801:
  2820  000F4A  EFD6  F007         	goto	l2688
  2821  000F4E                     u1800:
  2822  000F4E  5027               	movf	_bot_tout^0,w,c
  2823  000F50  A4D8               	btfss	status,2,c
  2824  000F52  EFAD  F007         	goto	u1811
  2825  000F56  EFAF  F007         	goto	u1810
  2826  000F5A                     u1811:
  2827  000F5A  EFD6  F007         	goto	l2688
  2828  000F5E                     u1810:
  2829  000F5E  0E00               	movlw	0
  2830  000F60  6E1E               	movwf	Botones13@Estado_BOT^0,c
  2831  000F62  EFD6  F007         	goto	l2688
  2832  000F66                     l2682:
  2833                           
  2834                           ;ConfShield1_3.c: 201:             Boton_Presionado = 0;;
  2835  000F66  0E00               	movlw	0
  2836  000F68  6E2B               	movwf	Botones13@Boton_Presionado^0,c
  2837                           
  2838                           ;ConfShield1_3.c: 202:             Estado_BOT = BotonLibre;
  2839  000F6A  0E00               	movlw	0
  2840  000F6C  6E1E               	movwf	Botones13@Estado_BOT^0,c
  2841                           
  2842                           ;ConfShield1_3.c: 203:             break;
  2843  000F6E  EFD6  F007         	goto	l2688
  2844  000F72                     l2686:
  2845  000F72  501E               	movf	Botones13@Estado_BOT^0,w,c
  2846  000F74  6E29               	movwf	??_Botones13^0,c
  2847  000F76  6A2A               	clrf	(??_Botones13+1)^0,c
  2848                           
  2849                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2850                           ; Switch size 1, requested type "simple"
  2851                           ; Number of cases is 1, Range of values is 0 to 0
  2852                           ; switch strategies available:
  2853                           ; Name         Instructions Cycles
  2854                           ; simple_byte            4     3 (average)
  2855                           ;	Chosen strategy is simple_byte
  2856  000F78  502A               	movf	(??_Botones13+1)^0,w,c
  2857  000F7A  0A00               	xorlw	0	; case 0
  2858  000F7C  B4D8               	btfsc	status,2,c
  2859  000F7E  EFC3  F007         	goto	l2914
  2860  000F82  EFB3  F007         	goto	l2682
  2861  000F86                     l2914:
  2862                           
  2863                           ; Switch size 1, requested type "simple"
  2864                           ; Number of cases is 4, Range of values is 0 to 3
  2865                           ; switch strategies available:
  2866                           ; Name         Instructions Cycles
  2867                           ; simple_byte           13     7 (average)
  2868                           ;	Chosen strategy is simple_byte
  2869  000F86  5029               	movf	??_Botones13^0,w,c
  2870  000F88  0A00               	xorlw	0	; case 0
  2871  000F8A  B4D8               	btfsc	status,2,c
  2872  000F8C  EF29  F007         	goto	l183
  2873  000F90  0A01               	xorlw	1	; case 1
  2874  000F92  B4D8               	btfsc	status,2,c
  2875  000F94  EF4B  F007         	goto	l2658
  2876  000F98  0A03               	xorlw	3	; case 2
  2877  000F9A  B4D8               	btfsc	status,2,c
  2878  000F9C  EF57  F007         	goto	l190
  2879  000FA0  0A01               	xorlw	1	; case 3
  2880  000FA2  B4D8               	btfsc	status,2,c
  2881  000FA4  EF8B  F007         	goto	l199
  2882  000FA8  EFB3  F007         	goto	l2682
  2883  000FAC                     l2688:
  2884                           
  2885                           ;ConfShield1_3.c: 206:     return Boton_Presionado;
  2886  000FAC  502B               	movf	Botones13@Boton_Presionado^0,w,c
  2887  000FAE  0012               	return		;funcret
  2888  000FB0                     __end_of_Botones13:
  2889                           	callstack 0
  2890                           
  2891 ;; *************** function _my_isr_routine *****************
  2892 ;; Defined at:
  2893 ;;		line 108 in file "main.c"
  2894 ;; Parameters:    Size  Location     Type
  2895 ;;		None
  2896 ;; Auto vars:     Size  Location     Type
  2897 ;;		None
  2898 ;; Return value:  Size  Location     Type
  2899 ;;                  1    wreg      void 
  2900 ;; Registers used:
  2901 ;;		wreg, status,2, status,0, cstack
  2902 ;; Tracked objects:
  2903 ;;		On entry : 0/0
  2904 ;;		On exit  : 0/0
  2905 ;;		Unchanged: 0/0
  2906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2907 ;;      Params:         0       0       0       0       0       0       0       0       0
  2908 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2909 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2910 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2911 ;;Total ram usage:        0 bytes
  2912 ;; Hardware stack levels used: 1
  2913 ;; Hardware stack levels required when called: 1
  2914 ;; This function calls:
  2915 ;;		_marca_tecla
  2916 ;;		_tic_bot
  2917 ;;		_tic_teclado
  2918 ;; This function is called by:
  2919 ;;		Interrupt level 2
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           	psect	intcode
  2924  000008                     __pintcode:
  2925                           	callstack 0
  2926  000008                     _my_isr_routine:
  2927                           	callstack 26
  2928                           
  2929                           ;incstack = 0
  2930  000008  8253               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2931  00000A  EDC9  F008         	call	int_func,f	;refresh shadow registers
  2932                           
  2933                           	psect	intcode_body
  2934  001192                     __pintcode_body:
  2935                           	callstack 26
  2936  001192                     int_func:
  2937                           	callstack 26
  2938  001192  0006               	pop		; remove dummy address from shadow register refresh
  2939  001194                     
  2940                           ;main.c: 109:     if (TMR0IF ==1)
  2941  001194  A4F2               	btfss	4082,2,c	;volatile
  2942  001196  EFCF  F008         	goto	i2u76_41
  2943  00119A  EFD1  F008         	goto	i2u76_40
  2944  00119E                     i2u76_41:
  2945  00119E  EFEE  F008         	goto	i2l1912
  2946  0011A2                     i2u76_40:
  2947  0011A2                     
  2948                           ;main.c: 110:     {;main.c: 111:         TMR0IF=0;
  2949  0011A2  94F2               	bcf	4082,2,c	;volatile
  2950  0011A4                     
  2951                           ;main.c: 112:         TMR0L = 209;
  2952  0011A4  0ED1               	movlw	209
  2953  0011A6  6ED6               	movwf	214,c	;volatile
  2954  0011A8                     
  2955                           ;main.c: 113:         TMR0H = 0xFF;
  2956  0011A8  68D7               	setf	215,c	;volatile
  2957  0011AA                     
  2958                           ;main.c: 115:         tic_teclado();
  2959  0011AA  ECB5  F009         	call	_tic_teclado	;wreg free
  2960  0011AE                     
  2961                           ;main.c: 116:         tic_bot();
  2962  0011AE  ECBF  F009         	call	_tic_bot	;wreg free
  2963  0011B2                     
  2964                           ;main.c: 117:         if(tiempo!=0){
  2965  0011B2  5007               	movf	_tiempo^0,w,c
  2966  0011B4  1008               	iorwf	(_tiempo+1)^0,w,c
  2967  0011B6  B4D8               	btfsc	status,2,c
  2968  0011B8  EFE0  F008         	goto	i2u77_41
  2969  0011BC  EFE2  F008         	goto	i2u77_40
  2970  0011C0                     i2u77_41:
  2971  0011C0  EFE5  F008         	goto	i2l1908
  2972  0011C4                     i2u77_40:
  2973  0011C4                     
  2974                           ;main.c: 118:             tiempo--;
  2975  0011C4  0607               	decf	_tiempo^0,f,c
  2976  0011C6  A0D8               	btfss	status,0,c
  2977  0011C8  0608               	decf	(_tiempo+1)^0,f,c
  2978  0011CA                     i2l1908:
  2979                           
  2980                           ;main.c: 120:         if(tiempo_lectura_adc!=0){
  2981  0011CA  5023               	movf	_tiempo_lectura_adc^0,w,c
  2982  0011CC  B4D8               	btfsc	status,2,c
  2983  0011CE  EFEB  F008         	goto	i2u78_41
  2984  0011D2  EFED  F008         	goto	i2u78_40
  2985  0011D6                     i2u78_41:
  2986  0011D6  EFEE  F008         	goto	i2l1912
  2987  0011DA                     i2u78_40:
  2988  0011DA                     
  2989                           ;main.c: 121:             tiempo_lectura_adc--;
  2990  0011DA  0623               	decf	_tiempo_lectura_adc^0,f,c
  2991  0011DC                     i2l1912:
  2992                           
  2993                           ;main.c: 124:     if (RBIF) {
  2994  0011DC  A0F2               	btfss	4082,0,c	;volatile
  2995  0011DE  EFF3  F008         	goto	i2u79_41
  2996  0011E2  EFF5  F008         	goto	i2u79_40
  2997  0011E6                     i2u79_41:
  2998  0011E6  EFF8  F008         	goto	i2l92
  2999  0011EA                     i2u79_40:
  3000  0011EA                     
  3001                           ;main.c: 125:         marca_tecla();
  3002  0011EA  ECD7  F009         	call	_marca_tecla	;wreg free
  3003  0011EE                     
  3004                           ;main.c: 126:         RBIF=0;
  3005  0011EE  90F2               	bcf	4082,0,c	;volatile
  3006  0011F0                     i2l92:
  3007  0011F0  9253               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3008  0011F2  0011               	retfie		f
  3009  0011F4                     __end_of_my_isr_routine:
  3010                           	callstack 0
  3011                           
  3012 ;; *************** function _tic_teclado *****************
  3013 ;; Defined at:
  3014 ;;		line 183 in file "teclado.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;		None
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;		None
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, status,2, status,0
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3028 ;;      Params:         0       0       0       0       0       0       0       0       0
  3029 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3030 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3031 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3032 ;;Total ram usage:        0 bytes
  3033 ;; Hardware stack levels used: 1
  3034 ;; This function calls:
  3035 ;;		Nothing
  3036 ;; This function is called by:
  3037 ;;		_my_isr_routine
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           	psect	text17
  3042  00136A                     __ptext17:
  3043                           	callstack 0
  3044  00136A                     _tic_teclado:
  3045                           	callstack 26
  3046  00136A                     
  3047                           ;teclado.c: 185:     if (delay_kb) delay_kb--;
  3048  00136A  500C               	movf	_delay_kb^0,w,c	;volatile
  3049  00136C  B4D8               	btfsc	status,2,c
  3050  00136E  EFBB  F009         	goto	i2u51_41
  3051  001372  EFBD  F009         	goto	i2u51_40
  3052  001376                     i2u51_41:
  3053  001376  EFBE  F009         	goto	i2l698
  3054  00137A                     i2u51_40:
  3055  00137A  060C               	decf	_delay_kb^0,f,c	;volatile
  3056  00137C                     i2l698:
  3057  00137C  0012               	return		;funcret
  3058  00137E                     __end_of_tic_teclado:
  3059                           	callstack 0
  3060                           
  3061 ;; *************** function _tic_bot *****************
  3062 ;; Defined at:
  3063 ;;		line 214 in file "ConfShield1_3.c"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;		None
  3066 ;; Auto vars:     Size  Location     Type
  3067 ;;		None
  3068 ;; Return value:  Size  Location     Type
  3069 ;;                  1    wreg      void 
  3070 ;; Registers used:
  3071 ;;		wreg, status,2, status,0
  3072 ;; Tracked objects:
  3073 ;;		On entry : 0/0
  3074 ;;		On exit  : 0/0
  3075 ;;		Unchanged: 0/0
  3076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3077 ;;      Params:         0       0       0       0       0       0       0       0       0
  3078 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3079 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3080 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3081 ;;Total ram usage:        0 bytes
  3082 ;; Hardware stack levels used: 1
  3083 ;; This function calls:
  3084 ;;		Nothing
  3085 ;; This function is called by:
  3086 ;;		_my_isr_routine
  3087 ;; This function uses a non-reentrant model
  3088 ;;
  3089                           
  3090                           	psect	text18
  3091  00137E                     __ptext18:
  3092                           	callstack 0
  3093  00137E                     _tic_bot:
  3094                           	callstack 26
  3095  00137E                     
  3096                           ;ConfShield1_3.c: 215:     if (bot_tout)bot_tout--;
  3097  00137E  5027               	movf	_bot_tout^0,w,c
  3098  001380  B4D8               	btfsc	status,2,c
  3099  001382  EFC5  F009         	goto	i2u52_41
  3100  001386  EFC7  F009         	goto	i2u52_40
  3101  00138A                     i2u52_41:
  3102  00138A  EFC8  F009         	goto	i2l210
  3103  00138E                     i2u52_40:
  3104  00138E  0627               	decf	_bot_tout^0,f,c
  3105  001390                     i2l210:
  3106  001390  0012               	return		;funcret
  3107  001392                     __end_of_tic_bot:
  3108                           	callstack 0
  3109                           
  3110 ;; *************** function _marca_tecla *****************
  3111 ;; Defined at:
  3112 ;;		line 176 in file "teclado.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;		None
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;		None
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  1    wreg      void 
  3119 ;; Registers used:
  3120 ;;		wreg, status,2
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3126 ;;      Params:         0       0       0       0       0       0       0       0       0
  3127 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3128 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3129 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3130 ;;Total ram usage:        0 bytes
  3131 ;; Hardware stack levels used: 1
  3132 ;; This function calls:
  3133 ;;		Nothing
  3134 ;; This function is called by:
  3135 ;;		_my_isr_routine
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139                           	psect	text19
  3140  0013AE                     __ptext19:
  3141                           	callstack 0
  3142  0013AE                     _marca_tecla:
  3143                           	callstack 26
  3144  0013AE                     
  3145                           ;teclado.c: 177:     (void)PORTB;
  3146  0013AE  5081               	movf	129,w,c	;volatile
  3147  0013B0  F000               	nop		;# 
  3148  0013B2                     
  3149                           ;teclado.c: 179:  flag_kb = 1;
  3150  0013B2  0E01               	movlw	1
  3151  0013B4  6E0D               	movwf	_flag_kb^0,c	;volatile
  3152  0013B6  F000               	nop		;# 
  3153  0013B8  0012               	return		;funcret
  3154  0013BA                     __end_of_marca_tecla:
  3155                           	callstack 0
  3156                           
  3157                           	psect	rparam
  3158  0000                     
  3159                           	psect	temp
  3160  000053                     btemp:
  3161                           	callstack 0
  3162  000053                     	ds	1
  3163  0000                     int$flags	set	btemp
  3164  0000                     wtemp8	set	btemp+1
  3165  0000                     ttemp5	set	btemp+1
  3166  0000                     ttemp6	set	btemp+4
  3167  0000                     ttemp7	set	btemp+8
  3168                           
  3169                           	psect	idloc
  3170                           
  3171                           ;Config register IDLOC0 @ 0x200000
  3172                           ;	unspecified, using default values
  3173  200000                     	org	2097152
  3174  200000  FF                 	db	255
  3175                           
  3176                           ;Config register IDLOC1 @ 0x200001
  3177                           ;	unspecified, using default values
  3178  200001                     	org	2097153
  3179  200001  FF                 	db	255
  3180                           
  3181                           ;Config register IDLOC2 @ 0x200002
  3182                           ;	unspecified, using default values
  3183  200002                     	org	2097154
  3184  200002  FF                 	db	255
  3185                           
  3186                           ;Config register IDLOC3 @ 0x200003
  3187                           ;	unspecified, using default values
  3188  200003                     	org	2097155
  3189  200003  FF                 	db	255
  3190                           
  3191                           ;Config register IDLOC4 @ 0x200004
  3192                           ;	unspecified, using default values
  3193  200004                     	org	2097156
  3194  200004  FF                 	db	255
  3195                           
  3196                           ;Config register IDLOC5 @ 0x200005
  3197                           ;	unspecified, using default values
  3198  200005                     	org	2097157
  3199  200005  FF                 	db	255
  3200                           
  3201                           ;Config register IDLOC6 @ 0x200006
  3202                           ;	unspecified, using default values
  3203  200006                     	org	2097158
  3204  200006  FF                 	db	255
  3205                           
  3206                           ;Config register IDLOC7 @ 0x200007
  3207                           ;	unspecified, using default values
  3208  200007                     	org	2097159
  3209  200007  FF                 	db	255
  3210                           
  3211                           	psect	config
  3212                           
  3213                           ;Config register CONFIG1L @ 0x300000
  3214                           ;	PLL Prescaler Selection bits
  3215                           ;	PLLDIV = 5, Divide by 5 (20 MHz oscillator input)
  3216                           ;	System Clock Postscaler Selection bits
  3217                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  3218                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  3219                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  3220  300000                     	org	3145728
  3221  300000  24                 	db	36
  3222                           
  3223                           ;Config register CONFIG1H @ 0x300001
  3224                           ;	Oscillator Selection bits
  3225                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
  3226                           ;	Fail-Safe Clock Monitor Enable bit
  3227                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3228                           ;	Internal/External Oscillator Switchover bit
  3229                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3230  300001                     	org	3145729
  3231  300001  0E                 	db	14
  3232                           
  3233                           ;Config register CONFIG2L @ 0x300002
  3234                           ;	Power-up Timer Enable bit
  3235                           ;	PWRT = OFF, PWRT disabled
  3236                           ;	Brown-out Reset Enable bits
  3237                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  3238                           ;	Brown-out Reset Voltage bits
  3239                           ;	BORV = 3, Minimum setting 2.05V
  3240                           ;	USB Voltage Regulator Enable bit
  3241                           ;	VREGEN = ON, USB voltage regulator enabled
  3242  300002                     	org	3145730
  3243  300002  3F                 	db	63
  3244                           
  3245                           ;Config register CONFIG2H @ 0x300003
  3246                           ;	Watchdog Timer Enable bit
  3247                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3248                           ;	Watchdog Timer Postscale Select bits
  3249                           ;	WDTPS = 32768, 1:32768
  3250  300003                     	org	3145731
  3251  300003  1E                 	db	30
  3252                           
  3253                           ; Padding undefined space
  3254  300004                     	org	3145732
  3255  300004  FF                 	db	255
  3256                           
  3257                           ;Config register CONFIG3H @ 0x300005
  3258                           ;	CCP2 MUX bit
  3259                           ;	CCP2MX = 0x1, unprogrammed default
  3260                           ;	PORTB A/D Enable bit
  3261                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3262                           ;	Low-Power Timer 1 Oscillator Enable bit
  3263                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3264                           ;	MCLR Pin Enable bit
  3265                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3266  300005                     	org	3145733
  3267  300005  81                 	db	129
  3268                           
  3269                           ;Config register CONFIG4L @ 0x300006
  3270                           ;	Stack Full/Underflow Reset Enable bit
  3271                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3272                           ;	Single-Supply ICSP Enable bit
  3273                           ;	LVP = OFF, Single-Supply ICSP disabled
  3274                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  3275                           ;	ICPRT = 0x0, unprogrammed default
  3276                           ;	Extended Instruction Set Enable bit
  3277                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3278                           ;	Background Debugger Enable bit
  3279                           ;	DEBUG = 0x1, unprogrammed default
  3280  300006                     	org	3145734
  3281  300006  81                 	db	129
  3282                           
  3283                           ; Padding undefined space
  3284  300007                     	org	3145735
  3285  300007  FF                 	db	255
  3286                           
  3287                           ;Config register CONFIG5L @ 0x300008
  3288                           ;	Code Protection bit
  3289                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  3290                           ;	Code Protection bit
  3291                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  3292                           ;	Code Protection bit
  3293                           ;	CP2 = 0x1, unprogrammed default
  3294                           ;	Code Protection bit
  3295                           ;	CP3 = 0x1, unprogrammed default
  3296  300008                     	org	3145736
  3297  300008  0F                 	db	15
  3298                           
  3299                           ;Config register CONFIG5H @ 0x300009
  3300                           ;	Boot Block Code Protection bit
  3301                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  3302                           ;	Data EEPROM Code Protection bit
  3303                           ;	CPD = 0x1, unprogrammed default
  3304  300009                     	org	3145737
  3305  300009  C0                 	db	192
  3306                           
  3307                           ;Config register CONFIG6L @ 0x30000A
  3308                           ;	Write Protection bit
  3309                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  3310                           ;	Write Protection bit
  3311                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  3312                           ;	Write Protection bit
  3313                           ;	WRT2 = 0x1, unprogrammed default
  3314                           ;	Write Protection bit
  3315                           ;	WRT3 = 0x1, unprogrammed default
  3316  30000A                     	org	3145738
  3317  30000A  0F                 	db	15
  3318                           
  3319                           ;Config register CONFIG6H @ 0x30000B
  3320                           ;	Configuration Register Write Protection bit
  3321                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  3322                           ;	Boot Block Write Protection bit
  3323                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  3324                           ;	Data EEPROM Write Protection bit
  3325                           ;	WRTD = 0x1, unprogrammed default
  3326  30000B                     	org	3145739
  3327  30000B  E0                 	db	224
  3328                           
  3329                           ;Config register CONFIG7L @ 0x30000C
  3330                           ;	Table Read Protection bit
  3331                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3332                           ;	Table Read Protection bit
  3333                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3334                           ;	Table Read Protection bit
  3335                           ;	EBTR2 = 0x1, unprogrammed default
  3336                           ;	Table Read Protection bit
  3337                           ;	EBTR3 = 0x1, unprogrammed default
  3338  30000C                     	org	3145740
  3339  30000C  0F                 	db	15
  3340                           
  3341                           ;Config register CONFIG7H @ 0x30000D
  3342                           ;	Boot Block Table Read Protection bit
  3343                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  3344  30000D                     	org	3145741
  3345  30000D  40                 	db	64
  3346                           tosu	equ	0xFFF
  3347                           tosh	equ	0xFFE
  3348                           tosl	equ	0xFFD
  3349                           stkptr	equ	0xFFC
  3350                           pclatu	equ	0xFFB
  3351                           pclath	equ	0xFFA
  3352                           pcl	equ	0xFF9
  3353                           tblptru	equ	0xFF8
  3354                           tblptrh	equ	0xFF7
  3355                           tblptrl	equ	0xFF6
  3356                           tablat	equ	0xFF5
  3357                           prodh	equ	0xFF4
  3358                           prodl	equ	0xFF3
  3359                           indf0	equ	0xFEF
  3360                           postinc0	equ	0xFEE
  3361                           postdec0	equ	0xFED
  3362                           preinc0	equ	0xFEC
  3363                           plusw0	equ	0xFEB
  3364                           fsr0h	equ	0xFEA
  3365                           fsr0l	equ	0xFE9
  3366                           wreg	equ	0xFE8
  3367                           indf1	equ	0xFE7
  3368                           postinc1	equ	0xFE6
  3369                           postdec1	equ	0xFE5
  3370                           preinc1	equ	0xFE4
  3371                           plusw1	equ	0xFE3
  3372                           fsr1h	equ	0xFE2
  3373                           fsr1l	equ	0xFE1
  3374                           bsr	equ	0xFE0
  3375                           indf2	equ	0xFDF
  3376                           postinc2	equ	0xFDE
  3377                           postdec2	equ	0xFDD
  3378                           preinc2	equ	0xFDC
  3379                           plusw2	equ	0xFDB
  3380                           fsr2h	equ	0xFDA
  3381                           fsr2l	equ	0xFD9
  3382                           status	equ	0xFD8

Data Sizes:
    Strings     20
    Constant    12
    Data        11
    BSS         40
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     29      82
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    msg2LCD@datos	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_3(CODE[6]), STR_2(CODE[6]), STR_1(CODE[8]), 


Critical Paths under _main in COMRAM

    _main->_LCD_init
    _set_CURSOR->_write_CMD
    _msg2LCD->_write_DATA
    _char2LCD->_write_DATA
    _write_DATA->_write_LCD
    ___awdiv->___awmod
    _LCD_init->_write_CMD
    _write_CMD->_write_LCD

Critical Paths under _my_isr_routine in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _my_isr_routine in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_isr_routine in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _my_isr_routine in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _my_isr_routine in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _my_isr_routine in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _my_isr_routine in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _my_isr_routine in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _my_isr_routine in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2476
                                             26 COMRAM     3     3      0
                          _Botones13
                           _LCD_init
                           _PicIni13
                         _TIMER0_INI
                            ___awdiv
                            ___awmod
                           _char2LCD
                            _msg2LCD
                       _obtener_ADC8
                         _set_CURSOR
                              _tecla
                       _tecladoIni13
 ---------------------------------------------------------------------------------
 (1) _tecladoIni13                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tecla                                                3     3      0      26
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _set_CURSOR                                           5     5      0     135
                                              2 COMRAM     5     5      0
                          _write_CMD
 ---------------------------------------------------------------------------------
 (1) _obtener_ADC8                                         2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _msg2LCD                                              6     4      2     385
                                              2 COMRAM     6     4      2
                         _write_DATA
 ---------------------------------------------------------------------------------
 (1) _char2LCD                                             5     5      0     134
                                              2 COMRAM     5     5      0
                         _write_DATA
 ---------------------------------------------------------------------------------
 (2) _write_DATA                                           1     1      0      66
                                              1 COMRAM     1     1      0
                          _write_LCD
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     752
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     604
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _TIMER0_INI                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PicIni13                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                            24    24      0     342
                                              2 COMRAM    24    24      0
                          _write_CMD
 ---------------------------------------------------------------------------------
 (2) _write_CMD                                            1     1      0      66
                                              1 COMRAM     1     1      0
                          _write_LCD
 ---------------------------------------------------------------------------------
 (3) _write_LCD                                            1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Botones13                                            3     3      0      29
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _my_isr_routine                                       0     0      0       0
                        _marca_tecla
                            _tic_bot
                        _tic_teclado
 ---------------------------------------------------------------------------------
 (5) _tic_teclado                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _tic_bot                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _marca_tecla                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Botones13
   _LCD_init
     _write_CMD
       _write_LCD
   _PicIni13
   _TIMER0_INI
   ___awdiv
     ___awmod (ARG)
   ___awmod
   _char2LCD
     _write_DATA
       _write_LCD
   _msg2LCD
     _write_DATA
   _obtener_ADC8
   _set_CURSOR
     _write_CMD
   _tecla
   _tecladoIni13

 _my_isr_routine (ROOT)
   _marca_tecla
   _tic_bot
   _tic_teclado

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1D      52       1       87.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      52      20        0.0%
DATA                 0      0      52       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Nov 10 15:02:53 2021

                       l72 0AEC                         l77 0BD6               ___awdiv@sign 0034  
                      l202 0FAE                        l135 131A                        l190 0EAE  
                      l191 0EC4                        l183 0E52                        l192 0F0A  
                      l193 0EDA                        l195 0EF0                        l603 0E48  
                      l612 133A                        l454 1352                        l606 139E  
                      l199 0F16                        l609 13AC                        l563 1190  
                      l492 12CA                        l660 1368                        _DEC 0016  
                      l494 12D8                        l495 12E8                        l583 1236  
                      l671 0866                        l568 1278                        l672 087C  
                      l681 091A                        l690 0A3A                        l674 0892  
                      l691 0A80                        l683 095E                        l675 08BE  
                      l932 1072                        l676 08A8                        l679 08D6  
                      l688 09EE                        l945 1122                        _PR2 000FCB  
                      _UNI 0015                        _dec 0022                        _col 0046  
                      _uni 0020               ___awmod@sign 002E           _MultiplicadorSet 0011  
                      wreg 000FE8             LCD_init@i_1842 002F             LCD_init@i_1843 0033  
           LCD_init@i_1844 0037             LCD_init@i_1845 003B             LCD_init@i_1846 003F  
                     l2410 1338                       l2402 131E                       l2404 1322  
                     l2500 0E06                       l2420 12EA                       l2412 1394  
                     l2406 132A                       l2502 0E0E                       l2422 1316  
                     l2430 134E                       l2414 1398                       l2510 1354  
                     l2408 1330                       l2416 13A2                       l2440 0C9C  
                     l2424 1318                       l2432 1350                       l2520 1124  
                     l2600 099E                       l2512 1360                       l2418 13A6  
                     l2450 0CE0                       l2442 0C9E                       l2434 0C94  
                     l2426 133C                       l2530 1148                       l2522 1128  
                     l2610 09B8                       l2602 09A0                       l2514 1362  
                     l2508 0E1E                       l2460 0CFE                       l2452 0CE6  
                     l2444 0CA6                       l2436 0C98                       l2428 134A  
                     l2532 1170                       l2524 1138                       l2700 12C6  
                     l2540 11FE                       l2620 0A26                       l2612 09C0  
                     l2604 09A2                       l2516 1364                       l2462 0D28  
                     l2454 0CEE                       l2438 0C9A                       l2534 1174  
                     l2702 12C8                       l2614 09FC                       l2606 09A4  
                     l2630 0A7E                       l2550 0828                       l2518 1366  
                     l2472 0D46                       l2464 0D2E                       l2448 0CB6  
                     l2720 0FCE                       l2712 0FB0                       l2640 1240  
                     l2704 12DA                       l2536 11F6                       l2616 0A0A  
                     l2560 084E                       l2552 0838                       l2800 0A90  
                     l2650 0E60                       l2490 0DC6                       l2474 0D70  
                     l2466 0D36                       l2730 1002                       l2722 0FDC  
                     l2714 0FB4                       l2706 12DE                       l2546 120E  
                     l2538 11F8                       l2618 0A18                       l2570 08B6  
                     l2562 085E                       l2554 083C                       l2810 0ABC  
                     l2802 0A94                       l2660 0EA6                       l2652 0E6E  
                     l2484 0D8E                       l2476 0D76                       l2740 103C  
                     l2732 100A                       l2724 0FE4                       l2716 0FC2  
                     l2708 12E2                       l2580 0904                       l2572 08BE  
                     l2564 0874                       l2556 083E                       l2628 0A44  
                     l2548 0822                       l2820 0B02                       l2812 0AC8  
                     l2804 0A98                       l2670 0F06                       l2662 0EBC  
                     l2654 0E7C                       l2486 0DB8                       l2478 0D7E  
                     l2750 1062                       l2742 1044                       l2734 1012  
                     l2726 0FE8                       l2718 0FCA                       l2646 1250  
                     l2638 123A                       l2590 0956                       l2582 0912  
                     l2574 08CE                       l2566 088A                       l2558 0840  
                     l2830 0B4A                       l2822 0B0E                       l2814 0ACE  
                     l2806 0AA4                       l2680 0F5E                       l2672 0F24  
                     l2664 0ED2                       l2656 0E8A                       l2648 0E4A  
                     l2496 0DD6                       l2488 0DBE                       l2752 106A  
                     l2744 1046                       l2736 1020                       l2728 0FF0  
                     l2760 1086                       l2912 0A58                       l2592 0970  
                     l2584 092C                       l2576 08E8                       l2568 08A0  
                     l2840 0BA2                       l2832 0B5C                       l2824 0B20  
                     l2816 0ADE                       l2808 0AB6                       l2914 0F86  
                     l2682 0F66                       l2674 0F32                       l2666 0EE8  
                     l2658 0E96                       l2498 0E00                       l2746 104C  
                     l2738 1026                       l2770 10BA                       l2762 108E  
                     l2594 097E                       l2586 093A                       l2578 08F6  
                     l2850 0BE6                       l2842 0BB8                       l2834 0B68  
                     l2826 0B2C                       l2818 0AF2                       l2676 0F40  
                     l2668 0EFE                       l2748 1052                       l2780 10F6  
                     l2772 10C2                       l2764 1092                       l2756 1074  
                     l2596 098C                       l2588 0948                       l2860 0C4A  
                     l2852 0BEA                       l2844 0BC0                       l2836 0B7A  
                     l2828 0B3E                       l2678 0F4E                       l2686 0F72  
                     l2782 10FC                       l2774 10CA                       l2766 10A0  
                     l2758 1078                       l2598 099A                       l2870 0C7E  
                     l2862 0C62                       l2854 0BF0                       l2846 0BC8  
                     l2838 0B82                       l2688 0FAC                       l2776 10D8  
                     l2784 1102                       l2768 10A8                       l2696 12B4  
                     l2872 0C84                       l2864 0C68                       l2856 0C06  
                     l2848 0BCE                       l2792 0A82                       l2786 1112  
                     l2778 10EE                       l2698 12BE                       l2866 0C70  
                     l2858 0C30                       l2794 0A8A                       l2788 111A  
                     l2868 0C76                       l2796 0A8C                       l2798 0A8E  
                     STR_1 080D                       STR_2 0815                       STR_3 081B  
                     _CENT 0017                       u2000 0B7A                       u2001 0B76  
                     u2010 0B92                       u2011 0B8C                       u2020 0BB8  
                     u2021 0BB4                       u2030 0BE6                       u2031 0BE2  
                     u1400 1190                       u2016 0B94                       u1401 118C  
                     u1330 0CE0                       u1410 1236                       u1331 0CDC  
                     u1411 1232                       u1340 0D28                       u1500 08F6  
                     u1420 0838                       u1341 0D24                       u1501 08F2  
                     u1421 0834                       _LATA 000F89                       u1350 0D70  
                     u1510 0904                       u1430 085E                       _LATB 000F8A  
                     u1351 0D6C                       u1511 0900                       u1431 085A  
                     _LATC 000F8B                       u1360 0DB8                       u1600 099A  
                     u1520 0912                       u1440 0874                       _LATD 000F8C  
                     u1361 0DB4                       u1601 0996                       u1521 090E  
                     u1441 0870                       _LATE 000F8D                       u1370 0E00  
                     u1610 09B4                       u1530 092C                       u1450 088A  
                     u1371 0DFC                       u1611 09B0                       u1531 0928  
                     u1451 0886                       u1700 0E7C                       u1380 0E48  
                     u1620 09FC                       u1540 093A                       u1460 08A0  
                     u1701 0E78                       u1381 0E44                       u1621 09F8  
                     u1541 0936                       u1461 089C                       u1710 0E8A  
                     u1390 1170                       u1630 0A0A                       u1550 0948  
                     u1470 08B6                       u1711 0E86                       u1391 116C  
                     u1631 0A06                       u1551 0944                       u1471 08B2  
                     u1800 0F4E                       u1720 0EA6                       u1640 0A18  
                     u1560 0956                       u1480 08CE                       u1801 0F4A  
                     u1721 0EA2                       u1641 0A14                       u1561 0952  
                     u1481 08CA                       u1810 0F5E                       u1730 0EBC  
                     u1650 0A26                       u1570 0970                       u1490 08E8  
                     u1811 0F5A                       u1731 0EB8                       u1651 0A22  
                     u1571 096C                       u1491 08E4                       u1740 0ED2  
                     u1900 10A0                       u1820 12D8                       u1660 0A36  
                     u1580 097E                       u1741 0ECE                       u1901 109C  
                     u1821 12D4                       u1661 0A32                       u1581 097A  
                     u1750 0EE8                       u1830 0FC2                       u1910 10BA  
                     u1670 1278                       u1590 098C                       u1751 0EE4  
                     u1831 0FBE                       u1911 10B6                       u1671 1274  
                     u1591 0988                       u1760 0EFE                       u1680 0E60  
                     u1840 0FDC                       u1920 10D8                       u1761 0EFA  
                     u1681 0E5C                       u1841 0FD8                       u1921 10D4  
                     u1770 0F24                       u1690 0E6E                       u1850 1002  
                     u1930 10EE                       u1771 0F20                       u1691 0E6A  
                     u1851 0FFE                       u1931 10EA                       u1780 0F32  
                     u1860 1020                       u1940 1112                       u1781 0F2E  
                     u1861 101C                       u1941 110E                       u1790 0F40  
                     u1870 103C                       u1950 0ADE                       u1791 0F3C  
                     u1871 1038                       u1951 0ADA                       u1880 1062  
                     u1960 0B02                       u1881 105E                       u1961 0AFE  
                     u1890 1086                       u1970 0B20                       u1891 1082  
                     u1971 0B1C                       u1980 0B3E                       u1981 0B3A  
                     u1990 0B5C                       u1991 0B58                       _RBIE 007F93  
                     _RBIF 007F90                       _RBIP 007F88                       i2l92 11F0  
                     _RBPU 007F8F                       _UMIL 0018               ?_marca_tecla 0029  
                     _cent 0021                       _fila 0047                       _main 0A82  
                     fsr1l 000FE1                       btemp 0053                       prodh 000FF4  
                     prodl 000FF3                       start 000E               msg2LCD@datos 002B  
             ___param_bank 000000                ?_TIMER0_INI 0029           __end_of_LCD_init 0E4A  
                    ?_main 0029            __end_of___awdiv 1074                      _EEADR 000FA9  
          __end_of___awmod 1124                      _CMCON 000FB4            ___awdiv@divisor 0031  
                    i2l210 1390                      i2l694 13B8                      i2l698 137C  
          ___awdiv@counter 0033                      _RCREG 000FAE                      _TMR0H 000FD7  
                    _TMR1H 000FCF                      _TMR0L 000FD6                      _TMR1L 000FCE  
                    _SPBRG 000FAF                      _PORTA 000F80                      _PORTB 000F81  
                    _PORTD 000F83                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95                      _TRISE 000F96  
                    _TXREG 000FAD            __end_of_msg2LCD 1192                      _boton 0025  
                    _tecla 0822            __end_of_tic_bot 1392                      tablat 000FF5  
                    ttemp5 0054                      ttemp6 0057                      ttemp7 005B  
                    status 000FD8                      wtemp8 0054            __initialization 127A  
             __end_of_main 0C94           __end_of_PicIni13 131C                     ??_main 0043  
            __activetblptr 000002    obtener_ADC8@GuardoPorta 0029    obtener_ADC8@GuardoTrisa 002A  
                   _ADCON1 000FC1                     _ADCON2 000FC0         __size_of_Botones13 0166  
                   _ADRESH 000FC4                     _EEDATA 000FA8                     _CCPR1L 000FBE  
                   ?_tecla 0029                     _EECON2 000FA7           ___awdiv@dividend 002F  
                   _INT0IE 007F94                     _INT0IF 007F91                     _INT1IE 007F83  
                   _INT1IF 007F80                     _MEMDIG 004B           __end_of_char2LCD 127A  
                   i2l1900 11AA                     i2l1910 11DA                     i2l1902 11AE  
                   i2l1904 11B2                     i2l1912 11DC                     i2l1690 138E  
                   i2l1914 11EA                     i2l1906 11C4        __size_of_TIMER0_INI 0018  
                   i2l1692 13AE                     i2l1684 136A                     i2l1916 11EE  
                   i2l1908 11CA                     i2l1694 13B2                     i2l1686 137A  
                   i2l1688 137E                     i2l1892 1194                     i2l1894 11A2  
                   i2l1896 11A4                     i2l1898 11A8               ?_tic_teclado 0029  
                   _TMR0IF 007F92                     _SPBRGH 000FB0                  ??___awdiv 0033  
                ??___awmod 002D                     clear_0 12A0           ___awdiv@quotient 0035  
                   _teclas 0801            ___awmod@divisor 002B                     isa$std 000001  
                   _tiempo 0007                     _numero 0005            ___awmod@counter 002D  
                ??_msg2LCD 002D               __pdataCOMRAM 0046               __mediumconst 0000  
                ??_tic_bot 0029                     tblptrh 000FF7                     tblptrl 000FF6  
            ?_obtener_ADC8 0029                     tblptru 000FF8              _OffsetPeriodo 0049  
               __accesstop 0060    __end_of__initialization 12A6                  ?_LCD_init 0029  
            ___rparam_used 000001       __size_of_marca_tecla 000C             __pcstackCOMRAM 0029  
        __end_of_Botones13 0FB0              tecla@tecla_KB 002B              __end_of_tecla 0A82  
                LCD_init@i 002B             ??_obtener_ADC8 0029                set_CURSOR@i 002C  
                  ??_tecla 0029              ?_tecladoIni13 0029                  ?_PicIni13 0029  
               __pnvCOMRAM 0051                 ??_LCD_init 002B              _maximoEncoder 001D  
             ??_TIMER0_INI 0029                  ?_char2LCD 0029               char2LCD@dato 002B  
                  Leds13@i 004E                    i2u51_40 137A                    i2u51_41 1376  
                  i2u52_40 138E                    i2u52_41 138A                    i2u76_40 11A2  
                  i2u76_41 119E                    i2u77_40 11C4                    i2u77_41 11C0  
                  i2u78_40 11DA                    i2u78_41 11D6                    i2u79_40 11EA  
                  i2u79_41 11E6             ??_tecladoIni13 0029    __size_of_my_isr_routine 11EC  
               ??_PicIni13 0029         __end_of_TIMER0_INI 1354                 _frecuencia 004F  
       __size_of_write_CMD 000E         __size_of_write_LCD 0020       __size_of_tic_teclado 0014  
                  __Hparam 0000                    __Lparam 0000                    ___awdiv 0FB0  
                  ___awmod 1074               __psmallconst 0800                    __pcinit 127A  
                  __ramtop 0800                    _flag_kb 000D                    __ptext0 0A82  
                  __ptext1 1354                    __ptext2 0822                    __ptext3 11F4  
                  __ptext4 12B4                    __ptext5 1124                    __ptext6 1238  
                  __ptext7 1392                    __ptext8 1074                    __ptext9 0FB0  
               ??_char2LCD 002B                    _msg2LCD 1124                  _T0CONbits 000FD5  
                _T1CONbits 000FCD                  _T2CONbits 000FCA           ___awmod@dividend 0029  
                  _tic_bot 137E              _minimoEncoder 001C                 _set_CURSOR 11F4  
      mux_display@contdisp 0014             __pintcode_body 1192              debounce@state 0010  
     end_of_initialization 12A6             set_CURSOR@posi 002B              __Lmediumconst 0000  
                  int_func 1192       __end_of_obtener_ADC8 12EA                  _RCSTAbits 000FAB  
                  postdec1 000FE5                    postinc0 000FEE                 _valor_pote 001F  
                _PORTAbits 000F80                  _PORTBbits 000F81                  _PORTCbits 000F82  
                _PORTDbits 000F83         _tiempo_lectura_adc 0023                  _PORTEbits 000F84  
        __end_of_write_CMD 13AE         _EstadoDeLosBotones 0026          __end_of_write_LCD 133C  
                _TRISAbits 000F92                  _TRISBbits 000F93                  _TRISCbits 000F94  
                _TRISEbits 000F96          tic_encoder@estado 004C                _CCP1CONbits 000FBD  
                _TXSTAbits 000FAC          __size_of_LCD_init 01B6                 _write_DATA 1392  
     __end_of_tecladoIni13 136A                _BAUDCONbits 000FB8              __pidataCOMRAM 13BA  
                _Botones13 0E4A             __end_of_teclas 080D        start_initialization 127A  
              ?_set_CURSOR 0029             _my_isr_routine 0008              ??_marca_tecla 0029  
        __size_of_PicIni13 0032             tecla@status_KB 000B                  _LowerByte 0013  
Botones13@Boton_Presionado 002B            _posicionEncoder 001B                 ?_Botones13 0029  
 tic_debounce@debounce_tic 0048                  _UpperByte 004A          __size_of_char2LCD 0042  
              __pbssCOMRAM 0001     __end_of_my_isr_routine 11F4      __size_of_obtener_ADC8 0036  
                _main$2691 0044                  _flagCanal 0019        __end_of_marca_tecla 13BA  
                char2LCD@i 002C                  __pintcode 0008        __size_of_set_CURSOR 0044  
              ?_write_DATA 0029                   ?___awdiv 002F                   ?___awmod 0029  
        Send4Disp@Nro_Disp 004D                   ?_msg2LCD 002B                __smallconst 0800  
                 ?_tic_bot 0029            ?_my_isr_routine 0029             _desplazar_tout 0001  
             _obtener_ADC8 12B4             __size_of_tecla 0260              ??_tic_teclado 0029  
             debounce@cnt0 000F               debounce@cnt1 000E                   _LATAbits 000F89  
                 _LATBbits 000F8A                   _LATCbits 000F8B                   _LATDbits 000F8C  
                 _LATEbits 000F8D                   _LCD_init 0C94                   _LCD_tout 0051  
                 _PIE1bits 000F9D                _encoderTout 001A      __size_of_tecladoIni13 0016  
                 _PIR1bits 000F9E                 _ADCON0bits 000FC2                ??_Botones13 0029  
            _Multiplicador 0012            _MedioPeriodoSet 0003                  _write_CMD 13A0  
                _write_LCD 131C                _INTCON2bits 000FF1                _INTCON3bits 000FF0  
                copy_data0 128E        __size_of_write_DATA 000E               _tecladoIni13 1354  
                 _PicIni13 12EA                _marca_tecla 13AE        Botones13@Estado_BOT 001E  
               _EECON1bits 000FA6                   __Hrparam 0000                   __Lrparam 0000  
      __end_of_tic_teclado 137E             write_DATA@dato 002A           __size_of___awdiv 00C4  
         __size_of___awmod 00B0                   _char2LCD 1238           __size_of_msg2LCD 006E  
                 _delay_kb 000C               ??_set_CURSOR 002B           __size_of_tic_bot 0014  
               ?_write_CMD 0029                 ?_write_LCD 0029                   __ptext10 133C  
                 __ptext11 12EA                   __ptext12 0C94                   __ptext13 13A0  
                 __ptext14 131C                   __ptext15 0E4A                   __ptext17 136A  
                 __ptext18 137E                   __ptext19 13AE                   _bot_tout 0027  
                 _led_tout 0009              __size_of_main 0212                   isa$xinst 000000  
                 int$flags 0053                   _mux_tout 0028         __end_of_set_CURSOR 1238  
                 _pulsador 0024                   msg2LCD@i 002D                 _INTCONbits 000FF2  
                 intlevel2 0000              write_CMD@dato 002A                _tic_teclado 136A  
            write_LCD@dato 0029               ??_write_DATA 002A                 _TIMER0_INI 133C  
         ??_my_isr_routine 0029                ??_write_CMD 002A                ??_write_LCD 0029  
       __end_of_write_DATA 13A0  
